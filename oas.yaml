openapi: 3.0.1
info:
  title: '카카오 선물하기 API'
  description: '백엔드와 협의한 1차 API 명세'
  version: 1.0.0

servers:
  - url: https://api.example.com

paths:
  # 상품 목록 조회 API : /api/products
  /api/products:
    get:
      description: 상품 목록을 불러와요.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          required: false
          description: 페이지 번호를 의미해요.
        - in: query
          name: size
          schema:
            type: number
            default: 10
          required: false
          description: 한 페이지에 보여줄 상품 개수를 의미해요.
        - in: query
          name: pageable
          schema:
            type: object
            example: {
                        "page": 0,
                        "size": 1,
                        "sort": [
                          "string"
                        ]
                      }
          required: true
          description: 페이지네이션 정보를 의미해요.
      responses:
        200:
          description: 상품 목록을 조회합니다.
          content:
            application/json:
              schema:
                type: string

  # 카테고리 목록 API : /api/categories
  /api/categories:
    get:
      description: 카테고리 목록을 조회해요.
      parameters:
      - in: query
        name: page
        schema:
          type: integer
          default: 0
        required: false
        description: 페이지 번호를 의미해요.
      - in: query
        name: size
        schema:
          type: number
          default: 10
        required: false
        description: 한 페이지에 보여줄 상품 개수를 의미해요.
      - in: query
        name: pageable
        schema:
          type: object
          example: {
                      "page": 0,
                      "size": 1,
                      "sort": [
                        "string"
                      ]
                    }
        required: true
        description: 페이지네이션 정보를 의미해요.
      responses:
        200:
          description: 카테고리 목록을 조회해요.
          content:
            application/json:
              schema:
                type: string

  # 상품 ID에 해당하는 상품 정보 조회 API : /api/products/{id}
  /api/products/{id}:
    get:
      description: 상품 ID에 해당하는 상품 정보를 조회해요.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: 상품 ID를 의미해요.
      responses:
        200:
          description: 상품 ID에 해당하는 상품 정보를 조회합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        404:
          description: 상품 ID에 해당하는 상품을 찾을 수 없습니다.

  # 상품 ID에 해당하는 상품 옵션 목록 조회 API : /api/products/{productId}/options  
  /api/products/{productId}/options:
    get:
      description: 상품 ID에 해당하는 상품 옵션 목록을 조회해요.
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: 상품 ID를 의미해요.
      responses:
        200:
          description: 상품 옵션 목록을 조회합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductOptionResponse'

  # 위시리스트 조회, 추가 API : /api/wishes
  /api/wishes:
    get:
      description: 사용자가 좋아요를 누른 상품 목록 (위시리스트) 을 조회해요.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          required: false
          description: 페이지 번호를 의미해요.
        - in: query
          name: size
          schema:
            type: number
            default: 10
          required: false
          description: 한 페이지에 보여줄 상품 개수를 의미해요.
        - in: query
          name: userID
          schema:
            type: integer
          required: true
          description: 사용자 ID를 의미해요.
        - in: query
          name: pageable
          schema:
            type: object
            example: {
                        "page": 0,
                        "size": 1,
                        "sort": [
                          "string"
                        ]
                      }
          required: true
          description: 페이지네이션 정보를 의미해요.
      responses:
        200:
          description: 사용자가 좋아요를 누른 상품 목록 (위시리스트) 을 조회합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedWishResponse'

    post:
      description: 사용자가 상품을 좋아요를 눌러 위시리스트에 추가해요.
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
          required: true
          description: 사용자 ID를 의미해요.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWishRequest'
      responses:
        200:
          description: 사용자가 상품을 좋아요를 눌러 위시리스트에 추가했어요.
        400:
          description: 사용자가 상품을 좋아요를 눌러 위시리스트에 추가하는데 실패했어요.
        404:
          description: 사용자가 상품을 좋아요를 누를 상품을 찾을 수 없어요.

  # 위시리스트에서 상품 삭제 API : /api/wishes/{productId}
  /api/wishes/{productId}:
    delete:
      description: 사용자가 상품을 위시리스트에서 삭제해요.
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: 상품 ID를 의미해요.
        - in: query
          name: userId
          schema:
            type: integer
          required: true
          description: 사용자 ID를 의미해요.
      responses:
        200:
          description: 사용자가 상품을 위시리스트에서 삭제했어요.
        # 400:
        #   description: 사용자가 상품을 위시리스트에서 삭제하는데 실패했어요.
        404:
          description: 사용자가 상품을 위시리스트에서 삭제할 상품을 찾을 수 없어요.

  # 사용자의 주문 목록 조회 API : /api/orders
  /api/orders:
    get:
      description: 사용자의 주문 목록을 조회해요.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          required: false
          description: 페이지 번호를 의미해요.
        - in: query
          name: size
          schema:
            type: number
            default: 10
          required: false
          description: 한 페이지에 보여줄 주문 개수를 의미해요.
        - in: query
          name: pageable
          schema:
            type: object
            example: {
                        "page": 0,
                        "size": 1,
                        "sort": [
                          "string"
                        ]
                      }
          required: true
          description: 페이지네이션 정보를 의미해요.
      responses:
        200:
          description: 사용자의 주문 목록을 조회합니다.
          content:
            application/json:
              schema:
                type: string
    post:
      description: 사용자가 상품을 주문해요.
      parameters:
        - in: header
          name: X-GATEWAY-TOKEN
          schema:
            type: string
          required: true
          description: 카카오톡 메시지를 보내기 위한 액세스 토큰입니다.
        - in: query
          name: userId
          schema:
            type: integer
          required: true
          description: 사용자 ID를 의미해요.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          description: 사용자가 상품을 주문했어요.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        400:
          description: 사용자가 상품을 주문하는데 실패했어요.
          content:
            application/json:
              schema:
                type: string

  # 사용자 조회 API : /api/users/{id}
  /api/user/{id}:
    get:
      description: 사용자를 조회해요.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: 사용자 ID를 의미해요.
      responses:
        200:
          description: 사용자를 조회합니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        404:
          description: 사용자를 찾을 수 없어요.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ProductResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: integer
        image_url:
          type: string
        category:
          type: string
      required:
        - id
        - name
        - price
        - image_url
        - category
    
    ProductOptionResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        quantity:
          type: integer
      required:
        - id
        - name
        - quantity

    PagedWishResponse:
      type: object
      properties:
        page:
          type: integer
        size:
          type: integer
        total_elements:
          type: integer
        total_pages:
          type: integer
        contents:
          $ref: '#/components/schemas/WishResponse'
      required:
        - page
        - size
        - total_elements
        - total_pages
        - contents

    AddWishRequest:
      type: object
      properties:
        productId:
          type: integer
      required:
        - productId

    OrderResponse:
      type: object
      properties:
        id:
          type: integer
        option_id:
          type: integer
        quantity:
          type: integer
        ordered_at:
          type: string
        message:
          type: string
      required:
        - id
        - option_id
        - quantity
        - ordered_at
        - message

    UserResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name

    WishResponse:
      type: object
      properties:
        product_id:
          type: integer
        name:
          type: string
        price:
          type: integer
        image_url:
          type: string
      required:
        - id
        - name
        - price
        - image_url

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message