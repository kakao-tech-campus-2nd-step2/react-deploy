{"ast":null,"code":"import { rest } from 'msw';\nimport { BASE_URL } from '../instance';\nconst usersDatabase = [{\n  email: 'test@example.com',\n  password: 'password123'\n} // 임시 데이터\n];\nexport const signupHandler = [\n// 회원가입 엔드포인트 수정\nrest.post(`${BASE_URL}/api/members/register`, (req, res, ctx) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  // 중복 이메일 체크\n  const existingUser = usersDatabase.find(user => user.email === email);\n  if (existingUser) {\n    return res(ctx.status(400), ctx.json({\n      message: '이미 사용 중인 이메일입니다.'\n    }));\n  }\n\n  // 임시 데이터와 동일한 경우\n  if (email === 'test@example.com' && password === 'password123') {\n    return res(ctx.status(400), ctx.json({\n      message: '해당 이메일과 비밀번호는 사용할 수 없습니다.'\n    }));\n  }\n\n  // 사용자 추가\n  usersDatabase.push({\n    email,\n    password\n  });\n  return res(ctx.status(201), ctx.json({\n    email,\n    accessToken: 'mocked-jwt-token'\n  })); // 이메일과 토큰 반환\n})];","map":{"version":3,"names":["rest","BASE_URL","usersDatabase","email","password","signupHandler","post","req","res","ctx","body","existingUser","find","user","status","json","message","push","accessToken"],"sources":["/Users/jiwon/Desktop/KaKaoTech/Step2/6주차 과제/react-deploy/src/api/hooks/signup.mock.ts"],"sourcesContent":["import { rest } from 'msw';\n\nimport { BASE_URL } from '../instance';\n\ntype SignupRequestBody = {\n  email: string;\n  password: string;\n};\n\nconst usersDatabase = [\n  { email: 'test@example.com', password: 'password123' }, // 임시 데이터\n];\n\nexport const signupHandler = [\n  // 회원가입 엔드포인트 수정\n  rest.post(`${BASE_URL}/api/members/register`, (req, res, ctx) => {\n    const { email, password } = req.body as SignupRequestBody;\n\n    // 중복 이메일 체크\n    const existingUser = usersDatabase.find((user) => user.email === email);\n    if (existingUser) {\n      return res(ctx.status(400), ctx.json({ message: '이미 사용 중인 이메일입니다.' }));\n    }\n\n    // 임시 데이터와 동일한 경우\n    if (email === 'test@example.com' && password === 'password123') {\n      return res(\n        ctx.status(400),\n        ctx.json({ message: '해당 이메일과 비밀번호는 사용할 수 없습니다.' }),\n      );\n    }\n\n    // 사용자 추가\n    usersDatabase.push({ email, password });\n    return res(ctx.status(201), ctx.json({ email, accessToken: 'mocked-jwt-token' })); // 이메일과 토큰 반환\n  }),\n];\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,KAAK;AAE1B,SAASC,QAAQ,QAAQ,aAAa;AAOtC,MAAMC,aAAa,GAAG,CACpB;EAAEC,KAAK,EAAE,kBAAkB;EAAEC,QAAQ,EAAE;AAAc,CAAC,CAAE;AAAA,CACzD;AAED,OAAO,MAAMC,aAAa,GAAG;AAC3B;AACAL,IAAI,CAACM,IAAI,CAAE,GAAEL,QAAS,uBAAsB,EAAE,CAACM,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EAC/D,MAAM;IAAEN,KAAK;IAAEC;EAAS,CAAC,GAAGG,GAAG,CAACG,IAAyB;;EAEzD;EACA,MAAMC,YAAY,GAAGT,aAAa,CAACU,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACV,KAAK,KAAKA,KAAK,CAAC;EACvE,IAAIQ,YAAY,EAAE;IAChB,OAAOH,GAAG,CAACC,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,EAAEL,GAAG,CAACM,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAmB,CAAC,CAAC,CAAC;EACxE;;EAEA;EACA,IAAIb,KAAK,KAAK,kBAAkB,IAAIC,QAAQ,KAAK,aAAa,EAAE;IAC9D,OAAOI,GAAG,CACRC,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,EACfL,GAAG,CAACM,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA4B,CAAC,CACnD,CAAC;EACH;;EAEA;EACAd,aAAa,CAACe,IAAI,CAAC;IAAEd,KAAK;IAAEC;EAAS,CAAC,CAAC;EACvC,OAAOI,GAAG,CAACC,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,EAAEL,GAAG,CAACM,IAAI,CAAC;IAAEZ,KAAK;IAAEe,WAAW,EAAE;EAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;AACrF,CAAC,CAAC,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}