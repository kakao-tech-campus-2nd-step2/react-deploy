{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useMutation } from '@tanstack/react-query';\nimport { useBackend } from '@/provider/Auth/Backend'; // 추가된 부분\n\nimport { fetchInstance } from '../instance';\nconst registerPath = `/api/members/register`;\nconst loginPath = `/api/members/login`;\nconst register = async (data, baseURL) => {\n  const response = await fetchInstance(baseURL).post(registerPath, data);\n  return response.data;\n};\nconst login = async (data, baseURL) => {\n  const response = await fetchInstance(baseURL).post(loginPath, data);\n  return response.data;\n};\nexport const useRegister = () => {\n  _s();\n  const {\n    backendUrl\n  } = useBackend();\n  return useMutation({\n    mutationFn: data => register(data, backendUrl)\n  });\n};\n_s(useRegister, \"4biO5bUR6TUMVZ3tgbo+xpPJBa4=\", false, function () {\n  return [useBackend, useMutation];\n});\nexport const useLogin = () => {\n  _s2();\n  const {\n    backendUrl\n  } = useBackend();\n  return useMutation({\n    mutationFn: data => login(data, backendUrl)\n  });\n};\n_s2(useLogin, \"4biO5bUR6TUMVZ3tgbo+xpPJBa4=\", false, function () {\n  return [useBackend, useMutation];\n});","map":{"version":3,"names":["useMutation","useBackend","fetchInstance","registerPath","loginPath","register","data","baseURL","response","post","login","useRegister","_s","backendUrl","mutationFn","useLogin","_s2"],"sources":["C:/Users/jihwan/projects/react-deploy/src/api/hooks/auth.ts"],"sourcesContent":["import type { UseMutationResult } from '@tanstack/react-query';\r\nimport { useMutation } from '@tanstack/react-query';\r\nimport type { AxiosResponse } from 'axios';\r\n\r\nimport { useBackend } from '@/provider/Auth/Backend'; // 추가된 부분\r\n\r\nimport { fetchInstance } from '../instance';\r\n\r\nexport type RegisterData = {\r\n  username: string;\r\n  password: string;\r\n  email: string;\r\n};\r\n\r\nexport type LoginData = {\r\n  username: string;\r\n  password: string;\r\n};\r\n\r\nexport type AuthResponse = {\r\n  token: string;\r\n  // 필요한 다른 필드를 여기에 추가할 수 있습니다.\r\n};\r\n\r\nconst registerPath = `/api/members/register`;\r\nconst loginPath = `/api/members/login`;\r\n\r\nconst register = async (data: RegisterData, baseURL: string): Promise<AuthResponse> => {\r\n  const response: AxiosResponse<AuthResponse> = await fetchInstance(baseURL).post(\r\n    registerPath,\r\n    data,\r\n  );\r\n  return response.data;\r\n};\r\n\r\nconst login = async (data: LoginData, baseURL: string): Promise<AuthResponse> => {\r\n  const response: AxiosResponse<AuthResponse> = await fetchInstance(baseURL).post(loginPath, data);\r\n  return response.data;\r\n};\r\n\r\nexport const useRegister = (): UseMutationResult<AuthResponse, Error, RegisterData> => {\r\n  const { backendUrl } = useBackend();\r\n\r\n  return useMutation<AuthResponse, Error, RegisterData>({\r\n    mutationFn: (data: RegisterData) => register(data, backendUrl),\r\n  });\r\n};\r\n\r\nexport const useLogin = (): UseMutationResult<AuthResponse, Error, LoginData> => {\r\n  const { backendUrl } = useBackend();\r\n\r\n  return useMutation<AuthResponse, Error, LoginData>({\r\n    mutationFn: (data: LoginData) => login(data, backendUrl),\r\n  });\r\n};\r\n"],"mappings":";;AACA,SAASA,WAAW,QAAQ,uBAAuB;AAGnD,SAASC,UAAU,QAAQ,yBAAyB,CAAC,CAAC;;AAEtD,SAASC,aAAa,QAAQ,aAAa;AAkB3C,MAAMC,YAAY,GAAI,uBAAsB;AAC5C,MAAMC,SAAS,GAAI,oBAAmB;AAEtC,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,IAAkB,EAAEC,OAAe,KAA4B;EACrF,MAAMC,QAAqC,GAAG,MAAMN,aAAa,CAACK,OAAO,CAAC,CAACE,IAAI,CAC7EN,YAAY,EACZG,IACF,CAAC;EACD,OAAOE,QAAQ,CAACF,IAAI;AACtB,CAAC;AAED,MAAMI,KAAK,GAAG,MAAAA,CAAOJ,IAAe,EAAEC,OAAe,KAA4B;EAC/E,MAAMC,QAAqC,GAAG,MAAMN,aAAa,CAACK,OAAO,CAAC,CAACE,IAAI,CAACL,SAAS,EAAEE,IAAI,CAAC;EAChG,OAAOE,QAAQ,CAACF,IAAI;AACtB,CAAC;AAED,OAAO,MAAMK,WAAW,GAAGA,CAAA,KAA4D;EAAAC,EAAA;EACrF,MAAM;IAAEC;EAAW,CAAC,GAAGZ,UAAU,CAAC,CAAC;EAEnC,OAAOD,WAAW,CAAoC;IACpDc,UAAU,EAAGR,IAAkB,IAAKD,QAAQ,CAACC,IAAI,EAAEO,UAAU;EAC/D,CAAC,CAAC;AACJ,CAAC;AAACD,EAAA,CANWD,WAAW;EAAA,QACCV,UAAU,EAE1BD,WAAW;AAAA;AAKpB,OAAO,MAAMe,QAAQ,GAAGA,CAAA,KAAyD;EAAAC,GAAA;EAC/E,MAAM;IAAEH;EAAW,CAAC,GAAGZ,UAAU,CAAC,CAAC;EAEnC,OAAOD,WAAW,CAAiC;IACjDc,UAAU,EAAGR,IAAe,IAAKI,KAAK,CAACJ,IAAI,EAAEO,UAAU;EACzD,CAAC,CAAC;AACJ,CAAC;AAACG,GAAA,CANWD,QAAQ;EAAA,QACId,UAAU,EAE1BD,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}