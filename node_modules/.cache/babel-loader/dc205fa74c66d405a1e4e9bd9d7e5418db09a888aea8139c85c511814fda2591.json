{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jihwan\\\\projects\\\\react-product-login\\\\src\\\\provider\\\\Auth\\\\index.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { authSessionStorage } from '@/utils/storage';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authInfo, setAuthInfo] = useState(() => {\n    const token = authSessionStorage.get();\n    return token ? {\n      id: token,\n      name: token,\n      token\n    } : undefined;\n  });\n  const [isReady, setIsReady] = useState(false);\n  useEffect(() => {\n    const token = authSessionStorage.get();\n    if (token) {\n      setAuthInfo({\n        id: token,\n        name: token,\n        token\n      });\n    }\n    setIsReady(true);\n  }, []);\n  const login = (id, name, token) => {\n    setAuthInfo({\n      id,\n      name,\n      token\n    });\n    authSessionStorage.set(token);\n  };\n  const logout = () => {\n    setAuthInfo(undefined);\n    authSessionStorage.clear();\n  };\n  if (!isReady) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authInfo,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"lsWr3AsrHQomdJBZbr4WEi+a2u8=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","authSessionStorage","Fragment","_Fragment","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","authInfo","setAuthInfo","token","get","id","name","isReady","setIsReady","login","set","logout","clear","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/jihwan/projects/react-product-login/src/provider/Auth/index.tsx"],"sourcesContent":["import type { ReactNode } from 'react';\r\nimport { createContext, useContext, useEffect, useState } from 'react';\r\n\r\nimport { authSessionStorage } from '@/utils/storage';\r\n\r\ntype AuthInfo = {\r\n  id: string;\r\n  name: string;\r\n  token: string;\r\n};\r\n\r\ntype AuthContextType = {\r\n  authInfo: AuthInfo | undefined;\r\n  login: (id: string, name: string, token: string) => void;\r\n  logout: () => void;\r\n};\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\r\n  const [authInfo, setAuthInfo] = useState<AuthInfo | undefined>(() => {\r\n    const token = authSessionStorage.get();\r\n    return token ? { id: token, name: token, token } : undefined;\r\n  });\r\n  const [isReady, setIsReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const token = authSessionStorage.get();\r\n    if (token) {\r\n      setAuthInfo({ id: token, name: token, token });\r\n    }\r\n    setIsReady(true);\r\n  }, []);\r\n\r\n  const login = (id: string, name: string, token: string) => {\r\n    setAuthInfo({ id, name, token });\r\n    authSessionStorage.set(token);\r\n  };\r\n\r\n  const logout = () => {\r\n    setAuthInfo(undefined);\r\n    authSessionStorage.clear();\r\n  };\r\n\r\n  if (!isReady) return <></>;\r\n  return (\r\n    <AuthContext.Provider value={{ authInfo, login, logout }}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AACA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAEtE,SAASC,kBAAkB,QAAQ,iBAAiB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAcrD,MAAMC,WAAW,gBAAGT,aAAa,CAA8BU,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAkC,CAAC,KAAK;EAAAC,EAAA;EACrE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAuB,MAAM;IACnE,MAAMa,KAAK,GAAGZ,kBAAkB,CAACa,GAAG,CAAC,CAAC;IACtC,OAAOD,KAAK,GAAG;MAAEE,EAAE,EAAEF,KAAK;MAAEG,IAAI,EAAEH,KAAK;MAAEA;IAAM,CAAC,GAAGN,SAAS;EAC9D,CAAC,CAAC;EACF,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACd,MAAMc,KAAK,GAAGZ,kBAAkB,CAACa,GAAG,CAAC,CAAC;IACtC,IAAID,KAAK,EAAE;MACTD,WAAW,CAAC;QAAEG,EAAE,EAAEF,KAAK;QAAEG,IAAI,EAAEH,KAAK;QAAEA;MAAM,CAAC,CAAC;IAChD;IACAK,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAK,GAAGA,CAACJ,EAAU,EAAEC,IAAY,EAAEH,KAAa,KAAK;IACzDD,WAAW,CAAC;MAAEG,EAAE;MAAEC,IAAI;MAAEH;IAAM,CAAC,CAAC;IAChCZ,kBAAkB,CAACmB,GAAG,CAACP,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMQ,MAAM,GAAGA,CAAA,KAAM;IACnBT,WAAW,CAACL,SAAS,CAAC;IACtBN,kBAAkB,CAACqB,KAAK,CAAC,CAAC;EAC5B,CAAC;EAED,IAAI,CAACL,OAAO,EAAE,oBAAOZ,OAAA,CAAAF,SAAA,mBAAI,CAAC;EAC1B,oBACEE,OAAA,CAACC,WAAW,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEb,QAAQ;MAAEQ,KAAK;MAAEE;IAAO,CAAE;IAAAZ,QAAA,EAAEA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAE/F,CAAC;AAAClB,EAAA,CA7BWF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AA+BzB,OAAO,MAAMsB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGlC,UAAU,CAACQ,WAAW,CAAC;EACvC,IAAI,CAAC0B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}