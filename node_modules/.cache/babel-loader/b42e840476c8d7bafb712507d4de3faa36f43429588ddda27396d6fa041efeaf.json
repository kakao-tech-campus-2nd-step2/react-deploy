{"ast":null,"code":"var _s = $RefreshSig$();\n// src/api/hooks/useGetProducts.ts\nimport { useInfiniteQuery } from '@tanstack/react-query';\nimport { useBackend } from '@/provider/Auth/Backend';\nimport { fetchInstance } from '../instance';\nconst getProductsPath = ({\n  categoryId,\n  pageToken,\n  maxResults\n}) => {\n  const params = new URLSearchParams();\n  params.append('categoryId', categoryId);\n  params.append('sort', 'name,asc');\n  if (pageToken) params.append('page', pageToken);\n  if (maxResults) params.append('size', maxResults.toString());\n  return `/api/products?${params.toString()}`;\n};\nexport const getProducts = async (params, baseURL) => {\n  const response = await fetchInstance(baseURL).get(getProductsPath(params));\n  const data = response.data;\n  return {\n    products: data.content,\n    nextPageToken: data.last === false ? (data.number + 1).toString() : undefined,\n    pageInfo: {\n      totalResults: data.totalElements,\n      resultsPerPage: data.size\n    },\n    pages: [{\n      products: data.content\n    }]\n  };\n};\nexport const useGetProducts = ({\n  categoryId,\n  maxResults = 20,\n  initPageToken\n}) => {\n  _s();\n  const {\n    backendUrl\n  } = useBackend();\n  return useInfiniteQuery({\n    queryKey: ['products', categoryId, maxResults, initPageToken],\n    queryFn: async ({\n      pageParam = initPageToken\n    }) => {\n      return getProducts({\n        categoryId,\n        pageToken: pageParam,\n        maxResults\n      }, backendUrl);\n    },\n    initialPageParam: initPageToken,\n    getNextPageParam: lastPage => lastPage.nextPageToken\n  });\n};\n_s(useGetProducts, \"t91sg3c0siwcL2IEeg49DqFpsnk=\", false, function () {\n  return [useBackend, useInfiniteQuery];\n});","map":{"version":3,"names":["useInfiniteQuery","useBackend","fetchInstance","getProductsPath","categoryId","pageToken","maxResults","params","URLSearchParams","append","toString","getProducts","baseURL","response","get","data","products","content","nextPageToken","last","number","undefined","pageInfo","totalResults","totalElements","resultsPerPage","size","pages","useGetProducts","initPageToken","_s","backendUrl","queryKey","queryFn","pageParam","initialPageParam","getNextPageParam","lastPage"],"sources":["C:/Users/jihwan/projects/react-deploy/src/api/hooks/useGetProducts.ts"],"sourcesContent":["// src/api/hooks/useGetProducts.ts\r\nimport { useInfiniteQuery, type UseInfiniteQueryResult } from '@tanstack/react-query';\r\n\r\nimport { useBackend } from '@/provider/Auth/Backend';\r\nimport type { ProductData } from '@/types';\r\n\r\nimport { fetchInstance } from '../instance';\r\n\r\ntype RequestParams = {\r\n  categoryId: string;\r\n  pageToken?: string;\r\n  maxResults?: number;\r\n};\r\n\r\ntype ProductsResponseData = {\r\n  products: ProductData[];\r\n  nextPageToken?: string;\r\n  pageInfo: {\r\n    totalResults: number;\r\n    resultsPerPage: number;\r\n  };\r\n  pages: { products: ProductData[] }[];\r\n};\r\n\r\ntype ProductsResponseRawData = {\r\n  content: ProductData[];\r\n  number: number;\r\n  totalElements: number;\r\n  size: number;\r\n  last: boolean;\r\n};\r\n\r\nconst getProductsPath = ({ categoryId, pageToken, maxResults }: RequestParams) => {\r\n  const params = new URLSearchParams();\r\n  params.append('categoryId', categoryId);\r\n  params.append('sort', 'name,asc');\r\n  if (pageToken) params.append('page', pageToken);\r\n  if (maxResults) params.append('size', maxResults.toString());\r\n  return `/api/products?${params.toString()}`;\r\n};\r\n\r\nexport const getProducts = async (\r\n  params: RequestParams,\r\n  baseURL: string,\r\n): Promise<ProductsResponseData> => {\r\n  const response = await fetchInstance(baseURL).get<ProductsResponseRawData>(\r\n    getProductsPath(params),\r\n  );\r\n  const data = response.data;\r\n\r\n  return {\r\n    products: data.content,\r\n    nextPageToken: data.last === false ? (data.number + 1).toString() : undefined,\r\n    pageInfo: {\r\n      totalResults: data.totalElements,\r\n      resultsPerPage: data.size,\r\n    },\r\n    pages: [{ products: data.content }],\r\n  };\r\n};\r\n\r\ntype Params = Pick<RequestParams, 'maxResults' | 'categoryId'> & { initPageToken?: string };\r\n\r\nexport const useGetProducts = ({\r\n  categoryId,\r\n  maxResults = 20,\r\n  initPageToken,\r\n}: Params): UseInfiniteQueryResult<ProductsResponseData> => {\r\n  const { backendUrl } = useBackend();\r\n\r\n  return useInfiniteQuery({\r\n    queryKey: ['products', categoryId, maxResults, initPageToken],\r\n    queryFn: async ({ pageParam = initPageToken }) => {\r\n      return getProducts({ categoryId, pageToken: pageParam, maxResults }, backendUrl);\r\n    },\r\n    initialPageParam: initPageToken,\r\n    getNextPageParam: (lastPage) => lastPage.nextPageToken,\r\n  });\r\n};\r\n"],"mappings":";AAAA;AACA,SAASA,gBAAgB,QAAqC,uBAAuB;AAErF,SAASC,UAAU,QAAQ,yBAAyB;AAGpD,SAASC,aAAa,QAAQ,aAAa;AA0B3C,MAAMC,eAAe,GAAGA,CAAC;EAAEC,UAAU;EAAEC,SAAS;EAAEC;AAA0B,CAAC,KAAK;EAChF,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EACpCD,MAAM,CAACE,MAAM,CAAC,YAAY,EAAEL,UAAU,CAAC;EACvCG,MAAM,CAACE,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC;EACjC,IAAIJ,SAAS,EAAEE,MAAM,CAACE,MAAM,CAAC,MAAM,EAAEJ,SAAS,CAAC;EAC/C,IAAIC,UAAU,EAAEC,MAAM,CAACE,MAAM,CAAC,MAAM,EAAEH,UAAU,CAACI,QAAQ,CAAC,CAAC,CAAC;EAC5D,OAAQ,iBAAgBH,MAAM,CAACG,QAAQ,CAAC,CAAE,EAAC;AAC7C,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAAA,CACzBJ,MAAqB,EACrBK,OAAe,KACmB;EAClC,MAAMC,QAAQ,GAAG,MAAMX,aAAa,CAACU,OAAO,CAAC,CAACE,GAAG,CAC/CX,eAAe,CAACI,MAAM,CACxB,CAAC;EACD,MAAMQ,IAAI,GAAGF,QAAQ,CAACE,IAAI;EAE1B,OAAO;IACLC,QAAQ,EAAED,IAAI,CAACE,OAAO;IACtBC,aAAa,EAAEH,IAAI,CAACI,IAAI,KAAK,KAAK,GAAG,CAACJ,IAAI,CAACK,MAAM,GAAG,CAAC,EAAEV,QAAQ,CAAC,CAAC,GAAGW,SAAS;IAC7EC,QAAQ,EAAE;MACRC,YAAY,EAAER,IAAI,CAACS,aAAa;MAChCC,cAAc,EAAEV,IAAI,CAACW;IACvB,CAAC;IACDC,KAAK,EAAE,CAAC;MAAEX,QAAQ,EAAED,IAAI,CAACE;IAAQ,CAAC;EACpC,CAAC;AACH,CAAC;AAID,OAAO,MAAMW,cAAc,GAAGA,CAAC;EAC7BxB,UAAU;EACVE,UAAU,GAAG,EAAE;EACfuB;AACM,CAAC,KAAmD;EAAAC,EAAA;EAC1D,MAAM;IAAEC;EAAW,CAAC,GAAG9B,UAAU,CAAC,CAAC;EAEnC,OAAOD,gBAAgB,CAAC;IACtBgC,QAAQ,EAAE,CAAC,UAAU,EAAE5B,UAAU,EAAEE,UAAU,EAAEuB,aAAa,CAAC;IAC7DI,OAAO,EAAE,MAAAA,CAAO;MAAEC,SAAS,GAAGL;IAAc,CAAC,KAAK;MAChD,OAAOlB,WAAW,CAAC;QAAEP,UAAU;QAAEC,SAAS,EAAE6B,SAAS;QAAE5B;MAAW,CAAC,EAAEyB,UAAU,CAAC;IAClF,CAAC;IACDI,gBAAgB,EAAEN,aAAa;IAC/BO,gBAAgB,EAAGC,QAAQ,IAAKA,QAAQ,CAACnB;EAC3C,CAAC,CAAC;AACJ,CAAC;AAACY,EAAA,CAfWF,cAAc;EAAA,QAKF3B,UAAU,EAE1BD,gBAAgB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}