{"ast":null,"code":"import { rest } from 'msw';\nimport { PRODUCTS_MOCK_DATA } from './products.mock';\nlet nextOrderId = 1;\nconst ordersDatabase = [];\nexport const orderHandlers = [\n// 주문 생성 핸들러\nrest.post('/api/orders', (req, res, ctx) => {\n  const newOrder = req.body;\n\n  // 유효성 검사\n  if (!newOrder.productId || !newOrder.optionId || !newOrder.quantity) {\n    return res(ctx.status(400), ctx.json({\n      message: 'Invalid input'\n    }));\n  }\n\n  // productId로 상품 정보 찾기\n  const product = PRODUCTS_MOCK_DATA.content.find(p => p.id === newOrder.productId);\n  if (!product) {\n    return res(ctx.status(404), ctx.json({\n      message: 'Product not found'\n    }));\n  }\n\n  // 주문 생성 로직\n  const createdOrder = {\n    id: nextOrderId++,\n    // 고유 ID 할당\n    productName: product.name,\n    optionName: '기본 옵션',\n    // 예시로 기본 옵션으로 설정\n    price: product.price * newOrder.quantity,\n    // 수량에 따른 가격 계산\n    date: new Date().toISOString(),\n    imageUrl: product.imageUrl,\n    ...newOrder\n  };\n\n  // 데이터베이스에 저장\n  ordersDatabase.push(createdOrder);\n  console.log('Created Order:', createdOrder);\n  return res(ctx.status(200), ctx.json(createdOrder));\n}),\n// 주문 목록 불러오기 핸들러\nrest.get('/api/orders', (req, res, ctx) => {\n  const page = parseInt(req.url.searchParams.get('page') || '0');\n  const size = parseInt(req.url.searchParams.get('size') || '10');\n  const totalElements = ordersDatabase.length;\n  const totalPages = Math.ceil(totalElements / size);\n  const start = page * size;\n  const end = start + size;\n  const orders = ordersDatabase.slice(start, end).map(order => ({\n    orderId: order.id,\n    productId: order.productId,\n    productName: order.productName,\n    optionName: order.optionName,\n    quantity: order.quantity,\n    date: order.date,\n    price: order.price,\n    imageUrl: order.imageUrl\n  }));\n  return res(ctx.status(200), ctx.json({\n    hasNext: page < totalPages - 1,\n    orders\n  }));\n})];","map":{"version":3,"names":["rest","PRODUCTS_MOCK_DATA","nextOrderId","ordersDatabase","orderHandlers","post","req","res","ctx","newOrder","body","productId","optionId","quantity","status","json","message","product","content","find","p","id","createdOrder","productName","name","optionName","price","date","Date","toISOString","imageUrl","push","console","log","get","page","parseInt","url","searchParams","size","totalElements","length","totalPages","Math","ceil","start","end","orders","slice","map","order","orderId","hasNext"],"sources":["/Users/jiwon/Desktop/KaKaoTech/Step2/6주차 과제/react-deploy/src/api/hooks/order.mock.ts"],"sourcesContent":["import { rest } from 'msw';\n\nimport { PRODUCTS_MOCK_DATA } from './products.mock';\n\ninterface OrderFormData {\n  productId: number;\n  optionId: number;\n  quantity: number;\n  hasCashReceipt: boolean;\n  cashReceiptType?: string;\n  cashReceiptNumber?: string;\n  message?: string;\n}\n\ninterface Order extends OrderFormData {\n  id: number;\n  productName: string;\n  optionName: string;\n  price: number;\n  date: string;\n  imageUrl: string;\n}\n\nlet nextOrderId = 1;\nconst ordersDatabase: Order[] = [];\n\nexport const orderHandlers = [\n  // 주문 생성 핸들러\n  rest.post('/api/orders', (req, res, ctx) => {\n    const newOrder = req.body as OrderFormData;\n\n    // 유효성 검사\n    if (!newOrder.productId || !newOrder.optionId || !newOrder.quantity) {\n      return res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\n    }\n\n    // productId로 상품 정보 찾기\n    const product = PRODUCTS_MOCK_DATA.content.find((p) => p.id === newOrder.productId);\n\n    if (!product) {\n      return res(ctx.status(404), ctx.json({ message: 'Product not found' }));\n    }\n\n    // 주문 생성 로직\n    const createdOrder: Order = {\n      id: nextOrderId++, // 고유 ID 할당\n      productName: product.name,\n      optionName: '기본 옵션', // 예시로 기본 옵션으로 설정\n      price: product.price * newOrder.quantity, // 수량에 따른 가격 계산\n      date: new Date().toISOString(),\n      imageUrl: product.imageUrl,\n      ...newOrder,\n    };\n\n    // 데이터베이스에 저장\n    ordersDatabase.push(createdOrder);\n    console.log('Created Order:', createdOrder);\n\n    return res(ctx.status(200), ctx.json(createdOrder));\n  }),\n\n  // 주문 목록 불러오기 핸들러\n  rest.get('/api/orders', (req, res, ctx) => {\n    const page = parseInt(req.url.searchParams.get('page') || '0');\n    const size = parseInt(req.url.searchParams.get('size') || '10');\n    const totalElements = ordersDatabase.length;\n    const totalPages = Math.ceil(totalElements / size);\n\n    const start = page * size;\n    const end = start + size;\n    const orders = ordersDatabase.slice(start, end).map((order) => ({\n      orderId: order.id,\n      productId: order.productId,\n      productName: order.productName,\n      optionName: order.optionName,\n      quantity: order.quantity,\n      date: order.date,\n      price: order.price,\n      imageUrl: order.imageUrl,\n    }));\n\n    return res(\n      ctx.status(200),\n      ctx.json({\n        hasNext: page < totalPages - 1,\n        orders,\n      }),\n    );\n  }),\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}