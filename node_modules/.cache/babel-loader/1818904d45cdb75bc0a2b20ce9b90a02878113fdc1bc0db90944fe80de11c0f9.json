{"ast":null,"code":"import { rest } from 'msw';\nimport { BASE_URL } from '../instance';\nexport const loginHandler = [rest.post(`${BASE_URL}/api/members/login`, (req, res, ctx) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  // Mocking login validation\n  if (email === 'test@example.com' && password === 'password123') {\n    return res(ctx.status(200), ctx.json({\n      email,\n      accessToken: 'mocked-jwt-token'\n    }));\n  } else {\n    return res(ctx.status(401), ctx.json({\n      message: 'Invalid email or password'\n    }));\n  }\n})];","map":{"version":3,"names":["rest","BASE_URL","loginHandler","post","req","res","ctx","email","password","body","status","json","accessToken","message"],"sources":["/Users/jiwon/Desktop/KaKaoTech/Step2/6주차 과제/react-deploy/src/api/hooks/login.mock.ts"],"sourcesContent":["import { rest } from 'msw';\n\nimport { BASE_URL } from '../instance';\n\ntype LoginRequestBody = {\n  email: string;\n  password: string;\n};\nexport const loginHandler = [\n  rest.post(`${BASE_URL}/api/members/login`, (req, res, ctx) => {\n    const { email, password } = req.body as LoginRequestBody;\n\n    // Mocking login validation\n    if (email === 'test@example.com' && password === 'password123') {\n      return res(\n        ctx.status(200),\n        ctx.json({\n          email,\n          accessToken: 'mocked-jwt-token',\n        }),\n      );\n    } else {\n      return res(ctx.status(401), ctx.json({ message: 'Invalid email or password' }));\n    }\n  }),\n];\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,KAAK;AAE1B,SAASC,QAAQ,QAAQ,aAAa;AAMtC,OAAO,MAAMC,YAAY,GAAG,CAC1BF,IAAI,CAACG,IAAI,CAAE,GAAEF,QAAS,oBAAmB,EAAE,CAACG,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EAC5D,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGJ,GAAG,CAACK,IAAwB;;EAExD;EACA,IAAIF,KAAK,KAAK,kBAAkB,IAAIC,QAAQ,KAAK,aAAa,EAAE;IAC9D,OAAOH,GAAG,CACRC,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,EACfJ,GAAG,CAACK,IAAI,CAAC;MACPJ,KAAK;MACLK,WAAW,EAAE;IACf,CAAC,CACH,CAAC;EACH,CAAC,MAAM;IACL,OAAOP,GAAG,CAACC,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,EAAEJ,GAAG,CAACK,IAAI,CAAC;MAAEE,OAAO,EAAE;IAA4B,CAAC,CAAC,CAAC;EACjF;AACF,CAAC,CAAC,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}