{"ast":null,"code":"var _s = $RefreshSig$();\n// src/api/hooks/useGetCategorys.ts\nimport { useQuery } from '@tanstack/react-query';\nimport { useBackend } from '@/provider/Auth/Backend';\nimport { fetchInstance } from '../instance';\nexport const getCategoriesPath = () => `/api/categories`;\nexport const getCategories = async baseURL => {\n  const response = await fetchInstance(baseURL).get(getCategoriesPath());\n  const responseData = response.data;\n\n  // 응답 데이터의 구조를 확인하고 필요한 형식으로 변환\n  if (Array.isArray(responseData)) {\n    return responseData;\n  } else if (responseData.categories && Array.isArray(responseData.categories)) {\n    return responseData.categories;\n  } else {\n    throw new Error('Unexpected response format');\n  }\n};\nexport const useGetCategories = () => {\n  _s();\n  const {\n    backendUrl\n  } = useBackend();\n  return useQuery({\n    queryKey: ['categories'],\n    queryFn: () => getCategories(backendUrl),\n    initialData: []\n  });\n};\n_s(useGetCategories, \"4gQo2fAezlvslvIrXosWhbxKTvw=\", false, function () {\n  return [useBackend, useQuery];\n});","map":{"version":3,"names":["useQuery","useBackend","fetchInstance","getCategoriesPath","getCategories","baseURL","response","get","responseData","data","Array","isArray","categories","Error","useGetCategories","_s","backendUrl","queryKey","queryFn","initialData"],"sources":["C:/Users/jihwan/projects/react-deploy/src/api/hooks/useGetCategorys.ts"],"sourcesContent":["// src/api/hooks/useGetCategorys.ts\r\nimport { useQuery } from '@tanstack/react-query';\r\n\r\nimport { useBackend } from '@/provider/Auth/Backend';\r\nimport type { CategoryData } from '@/types';\r\n\r\nimport { fetchInstance } from '../instance';\r\n\r\nexport type CategoryResponseData = CategoryData[];\r\n\r\nexport const getCategoriesPath = () => `/api/categories`;\r\n\r\nexport const getCategories = async (baseURL: string) => {\r\n  const response = await fetchInstance(baseURL).get(getCategoriesPath());\r\n  const responseData = response.data;\r\n\r\n  // 응답 데이터의 구조를 확인하고 필요한 형식으로 변환\r\n  if (Array.isArray(responseData)) {\r\n    return responseData;\r\n  } else if (responseData.categories && Array.isArray(responseData.categories)) {\r\n    return responseData.categories;\r\n  } else {\r\n    throw new Error('Unexpected response format');\r\n  }\r\n};\r\n\r\nexport const useGetCategories = () => {\r\n  const { backendUrl } = useBackend();\r\n\r\n  return useQuery({\r\n    queryKey: ['categories'],\r\n    queryFn: () => getCategories(backendUrl),\r\n    initialData: [],\r\n  });\r\n};\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,uBAAuB;AAEhD,SAASC,UAAU,QAAQ,yBAAyB;AAGpD,SAASC,aAAa,QAAQ,aAAa;AAI3C,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAO,iBAAgB;AAExD,OAAO,MAAMC,aAAa,GAAG,MAAOC,OAAe,IAAK;EACtD,MAAMC,QAAQ,GAAG,MAAMJ,aAAa,CAACG,OAAO,CAAC,CAACE,GAAG,CAACJ,iBAAiB,CAAC,CAAC,CAAC;EACtE,MAAMK,YAAY,GAAGF,QAAQ,CAACG,IAAI;;EAElC;EACA,IAAIC,KAAK,CAACC,OAAO,CAACH,YAAY,CAAC,EAAE;IAC/B,OAAOA,YAAY;EACrB,CAAC,MAAM,IAAIA,YAAY,CAACI,UAAU,IAAIF,KAAK,CAACC,OAAO,CAACH,YAAY,CAACI,UAAU,CAAC,EAAE;IAC5E,OAAOJ,YAAY,CAACI,UAAU;EAChC,CAAC,MAAM;IACL,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACF,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM;IAAEC;EAAW,CAAC,GAAGf,UAAU,CAAC,CAAC;EAEnC,OAAOD,QAAQ,CAAC;IACdiB,QAAQ,EAAE,CAAC,YAAY,CAAC;IACxBC,OAAO,EAAEA,CAAA,KAAMd,aAAa,CAACY,UAAU,CAAC;IACxCG,WAAW,EAAE;EACf,CAAC,CAAC;AACJ,CAAC;AAACJ,EAAA,CARWD,gBAAgB;EAAA,QACJb,UAAU,EAE1BD,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}