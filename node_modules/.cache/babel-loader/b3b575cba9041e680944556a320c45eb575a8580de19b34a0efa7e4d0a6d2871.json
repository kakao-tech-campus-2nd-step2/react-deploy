{"ast":null,"code":"import { rest } from \"msw\";\nimport { PRODUCTS_MOCK_DATA } from \"./products.mock\";\nconst wishesDatabase = []; // WishItem 형식으로 변경\nlet nextId = 1;\nexport const interestHandlers = [\n// 관심 목록에 추가\nrest.post(\"/api/members/wishes/products/:productId\", (req, res, ctx) => {\n  const {\n    productId\n  } = req.params;\n  const product = PRODUCTS_MOCK_DATA.content.find(item => item.id === Number(productId));\n\n  // 유효성 검사: productId에 해당하는 상품이 존재하는지 확인\n  if (!product) {\n    return res(ctx.status(404), ctx.json({\n      message: \"Product not found\"\n    }));\n  }\n  const newWish = {\n    id: nextId++,\n    // 고유 ID 할당\n    product\n  };\n  wishesDatabase.push(newWish);\n  console.log(newWish);\n  return res(ctx.status(201), ctx.json(newWish));\n}),\n// 관심 목록 리스트 불러오기\nrest.get(\"/api/members/wishes\", (req, res, ctx) => {\n  const page = parseInt(req.url.searchParams.get(\"page\") || \"0\");\n  const size = parseInt(req.url.searchParams.get(\"size\") || \"10\");\n  const totalElements = wishesDatabase.length;\n  const totalPages = Math.ceil(totalElements / size);\n  const start = page * size;\n  const end = start + size;\n  const content = wishesDatabase.slice(start, end);\n  return res(ctx.status(200), ctx.json({\n    content,\n    pageable: {\n      sort: {\n        sorted: true,\n        unsorted: false,\n        empty: false\n      },\n      pageNumber: page,\n      pageSize: size,\n      offset: start,\n      unpaged: false,\n      paged: true\n    },\n    totalPages,\n    totalElements,\n    last: page === totalPages - 1,\n    number: page,\n    size,\n    numberOfElements: content.length,\n    first: page === 0,\n    empty: content.length === 0\n  }));\n}),\n// 위시 삭제 핸들러 추가\nrest.delete(\"/api/members/wishes/:wishId\", (req, res, ctx) => {\n  const {\n    wishId\n  } = req.params;\n  const wishIndex = wishesDatabase.findIndex(wish => wish.id === Number(wishId));\n  if (wishIndex === -1) {\n    return res(ctx.status(404), ctx.json({\n      message: \"Wish not found\"\n    }));\n  }\n  wishesDatabase.splice(wishIndex, 1); // 위시 삭제\n  return res(ctx.status(204)); // 성공 응답\n})];","map":{"version":3,"names":["rest","PRODUCTS_MOCK_DATA","wishesDatabase","nextId","interestHandlers","post","req","res","ctx","productId","params","product","content","find","item","id","Number","status","json","message","newWish","push","console","log","get","page","parseInt","url","searchParams","size","totalElements","length","totalPages","Math","ceil","start","end","slice","pageable","sort","sorted","unsorted","empty","pageNumber","pageSize","offset","unpaged","paged","last","number","numberOfElements","first","delete","wishId","wishIndex","findIndex","wish","splice"],"sources":["/Users/jiwon/Desktop/KaKaoTech/Step2/6주차 과제/react-deploy/src/api/hooks/interest.mock.ts"],"sourcesContent":["import { rest } from \"msw\";\n\nimport type { WishItem } from \"@/pages/MyAccount\";\nimport { PRODUCTS_MOCK_DATA } from \"./products.mock\";\n\nconst wishesDatabase: WishItem[] = []; // WishItem 형식으로 변경\nlet nextId = 1;\nexport const interestHandlers = [\n  // 관심 목록에 추가\n  rest.post(\"/api/members/wishes/products/:productId\", (req, res, ctx) => {\n    const { productId } = req.params;\n    const product = PRODUCTS_MOCK_DATA.content.find(\n      (item) => item.id === Number(productId)\n    );\n\n    // 유효성 검사: productId에 해당하는 상품이 존재하는지 확인\n    if (!product) {\n      return res(ctx.status(404), ctx.json({ message: \"Product not found\" }));\n    }\n\n    const newWish = {\n      id: nextId++, // 고유 ID 할당\n      product,\n    };\n\n    wishesDatabase.push(newWish);\n    console.log(newWish);\n\n    return res(ctx.status(201), ctx.json(newWish));\n  }),\n\n  // 관심 목록 리스트 불러오기\n  rest.get(\"/api/members/wishes\", (req, res, ctx) => {\n    const page = parseInt(req.url.searchParams.get(\"page\") || \"0\");\n    const size = parseInt(req.url.searchParams.get(\"size\") || \"10\");\n    const totalElements = wishesDatabase.length;\n    const totalPages = Math.ceil(totalElements / size);\n\n    const start = page * size;\n    const end = start + size;\n    const content = wishesDatabase.slice(start, end);\n\n    return res(\n      ctx.status(200),\n      ctx.json({\n        content,\n        pageable: {\n          sort: {\n            sorted: true,\n            unsorted: false,\n            empty: false,\n          },\n          pageNumber: page,\n          pageSize: size,\n          offset: start,\n          unpaged: false,\n          paged: true,\n        },\n        totalPages,\n        totalElements,\n        last: page === totalPages - 1,\n        number: page,\n        size,\n        numberOfElements: content.length,\n        first: page === 0,\n        empty: content.length === 0,\n      })\n    );\n  }),\n\n  // 위시 삭제 핸들러 추가\n  rest.delete(\"/api/members/wishes/:wishId\", (req, res, ctx) => {\n    const { wishId } = req.params;\n    const wishIndex = wishesDatabase.findIndex(\n      (wish) => wish.id === Number(wishId)\n    );\n\n    if (wishIndex === -1) {\n      return res(ctx.status(404), ctx.json({ message: \"Wish not found\" }));\n    }\n\n    wishesDatabase.splice(wishIndex, 1); // 위시 삭제\n    return res(ctx.status(204)); // 성공 응답\n  }),\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}