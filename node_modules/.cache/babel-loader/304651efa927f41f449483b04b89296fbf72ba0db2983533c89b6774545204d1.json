{"ast":null,"code":"import{createContext,useContext,useEffect,useState}from'react';import{authSessionStorage}from'@/utils/storage';import{Fragment as _Fragment,jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const currentAuthToken=authSessionStorage.get();const[isReady,setIsReady]=useState(!currentAuthToken);const[authInfo,setAuthInfo]=useState(undefined);useEffect(()=>{if(currentAuthToken){setAuthInfo({id:currentAuthToken,// TODO: 임시로 로그인 페이지에서 입력한 이름을 ID, token, name으로 사용\nname:currentAuthToken,token:currentAuthToken});setIsReady(true);}},[currentAuthToken]);if(!isReady)return/*#__PURE__*/_jsx(_Fragment,{});return/*#__PURE__*/_jsx(AuthContext.Provider,{value:authInfo,children:children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["createContext","useContext","useEffect","useState","authSessionStorage","Fragment","_Fragment","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","currentAuthToken","get","isReady","setIsReady","authInfo","setAuthInfo","id","name","token","Provider","value","useAuth"],"sources":["/Users/kyoungseo/Desktop/4학년/카테캠/step2/kakao-gift5/react-product-login/src/provider/Auth/index.tsx"],"sourcesContent":["import type { ReactNode } from 'react';\nimport { createContext, useContext, useEffect, useState } from 'react';\n\nimport { authSessionStorage } from '@/utils/storage';\n\ntype AuthInfo = {\n  id: string;\n  name: string;\n  token: string;\n};\n\nexport const AuthContext = createContext<AuthInfo | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const currentAuthToken = authSessionStorage.get();\n  const [isReady, setIsReady] = useState(!currentAuthToken);\n\n  const [authInfo, setAuthInfo] = useState<AuthInfo | undefined>(undefined);\n\n  useEffect(() => {\n    if (currentAuthToken) {\n      setAuthInfo({\n        id: currentAuthToken, // TODO: 임시로 로그인 페이지에서 입력한 이름을 ID, token, name으로 사용\n        name: currentAuthToken,\n        token: currentAuthToken,\n      });\n      setIsReady(true);\n    }\n  }, [currentAuthToken]);\n\n  if (!isReady) return <></>;\n  return <AuthContext.Provider value={authInfo}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":"AACA,OAASA,aAAa,CAAEC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAEtE,OAASC,kBAAkB,KAAQ,iBAAiB,CAAC,OAAAC,QAAA,IAAAC,SAAA,CAAAC,GAAA,IAAAC,IAAA,yBAQrD,MAAO,MAAM,CAAAC,WAAW,cAAGT,aAAa,CAAuBU,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,YAAY,CAAGC,IAAA,EAA2C,IAA1C,CAAEC,QAAkC,CAAC,CAAAD,IAAA,CAChE,KAAM,CAAAE,gBAAgB,CAAGV,kBAAkB,CAACW,GAAG,CAAC,CAAC,CACjD,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAC,CAACW,gBAAgB,CAAC,CAEzD,KAAM,CAACI,QAAQ,CAAEC,WAAW,CAAC,CAAGhB,QAAQ,CAAuBO,SAAS,CAAC,CAEzER,SAAS,CAAC,IAAM,CACd,GAAIY,gBAAgB,CAAE,CACpBK,WAAW,CAAC,CACVC,EAAE,CAAEN,gBAAgB,CAAE;AACtBO,IAAI,CAAEP,gBAAgB,CACtBQ,KAAK,CAAER,gBACT,CAAC,CAAC,CACFG,UAAU,CAAC,IAAI,CAAC,CAClB,CACF,CAAC,CAAE,CAACH,gBAAgB,CAAC,CAAC,CAEtB,GAAI,CAACE,OAAO,CAAE,mBAAOR,IAAA,CAAAF,SAAA,GAAI,CAAC,CAC1B,mBAAOE,IAAA,CAACC,WAAW,CAACc,QAAQ,EAACC,KAAK,CAAEN,QAAS,CAAAL,QAAA,CAAEA,QAAQ,CAAuB,CAAC,CACjF,CAAC,CAED,MAAO,MAAM,CAAAY,OAAO,CAAGA,CAAA,GAAMxB,UAAU,CAACQ,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}