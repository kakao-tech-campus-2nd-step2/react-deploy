{"ast":null,"code":"import { QueryClient } from '@tanstack/react-query';\nimport axios from 'axios';\nconst initInstance = (baseURL, config) => {\n  return axios.create({\n    baseURL,\n    timeout: 5000,\n    ...config,\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      ...(config === null || config === void 0 ? void 0 : config.headers)\n    }\n  });\n};\nexport const fetchInstance = (baseURL, config) => {\n  const instance = initInstance(baseURL, config);\n\n  // 요청 인터셉터를 사용하여 모든 요청에 토큰을 포함시킴\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  instance.interceptors.request.use(config => {\n    const token = localStorage.getItem('authToken'); // 또는 다른 저장소에서 토큰을 가져옴\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  });\n  return instance;\n};\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 1,\n      refetchOnMount: true,\n      refetchOnReconnect: true,\n      refetchOnWindowFocus: true\n    }\n  }\n});","map":{"version":3,"names":["QueryClient","axios","initInstance","baseURL","config","create","timeout","headers","Accept","fetchInstance","instance","interceptors","request","use","token","localStorage","getItem","Authorization","queryClient","defaultOptions","queries","retry","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus"],"sources":["C:/Users/jihwan/projects/react-deploy/src/api/instance/index.ts"],"sourcesContent":["import { QueryClient } from '@tanstack/react-query';\r\nimport type { AxiosInstance, AxiosRequestConfig } from 'axios';\r\nimport axios from 'axios';\r\n\r\nconst initInstance = (baseURL: string, config?: AxiosRequestConfig): AxiosInstance => {\r\n  return axios.create({\r\n    baseURL,\r\n    timeout: 5000,\r\n    ...config,\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      ...config?.headers,\r\n    },\r\n  });\r\n};\r\n\r\nexport const fetchInstance = (baseURL: string, config?: AxiosRequestConfig): AxiosInstance => {\r\n  const instance = initInstance(baseURL, config);\r\n\r\n  // 요청 인터셉터를 사용하여 모든 요청에 토큰을 포함시킴\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow\r\n  instance.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem('authToken'); // 또는 다른 저장소에서 토큰을 가져옴\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  });\r\n\r\n  return instance;\r\n};\r\n\r\nexport const queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      retry: 1,\r\n      refetchOnMount: true,\r\n      refetchOnReconnect: true,\r\n      refetchOnWindowFocus: true,\r\n    },\r\n  },\r\n});\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,uBAAuB;AAEnD,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGA,CAACC,OAAe,EAAEC,MAA2B,KAAoB;EACpF,OAAOH,KAAK,CAACI,MAAM,CAAC;IAClBF,OAAO;IACPG,OAAO,EAAE,IAAI;IACb,GAAGF,MAAM;IACTG,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClC,IAAGJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,OAAO;IACpB;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,aAAa,GAAGA,CAACN,OAAe,EAAEC,MAA2B,KAAoB;EAC5F,MAAMM,QAAQ,GAAGR,YAAY,CAACC,OAAO,EAAEC,MAAM,CAAC;;EAE9C;EACA;EACAM,QAAQ,CAACC,YAAY,CAACC,OAAO,CAACC,GAAG,CAAET,MAAM,IAAK;IAC5C,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IACjD,IAAIF,KAAK,EAAE;MACTV,MAAM,CAACG,OAAO,CAACU,aAAa,GAAI,UAASH,KAAM,EAAC;IAClD;IACA,OAAOV,MAAM;EACf,CAAC,CAAC;EAEF,OAAOM,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMQ,WAAW,GAAG,IAAIlB,WAAW,CAAC;EACzCmB,cAAc,EAAE;IACdC,OAAO,EAAE;MACPC,KAAK,EAAE,CAAC;MACRC,cAAc,EAAE,IAAI;MACpBC,kBAAkB,EAAE,IAAI;MACxBC,oBAAoB,EAAE;IACxB;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}