{"ast":null,"code":"var _s = $RefreshSig$();\n// src/api/hooks/useGetProductOptions.ts\nimport { useSuspenseQuery } from '@tanstack/react-query';\nimport { useBackend } from '@/provider/Auth/Backend'; // useBackend 훅 사용\n\nimport { fetchInstance } from '../instance';\nexport const getProductOptionsPath = productId => `/api/products/${productId}/options`;\nexport const getProductOptions = async (params, baseURL) => {\n  const response = await fetchInstance(baseURL).get(getProductOptionsPath(params.productId));\n  return response.data;\n};\nexport const useGetProductOptions = ({\n  productId\n}) => {\n  _s();\n  const {\n    backendUrl\n  } = useBackend(); // useBackend 훅 사용\n\n  return useSuspenseQuery({\n    queryKey: [getProductOptionsPath(productId)],\n    queryFn: () => getProductOptions({\n      productId\n    }, backendUrl)\n  });\n};\n_s(useGetProductOptions, \"7IWQCQGHwCiAj3uckymYCHaw9Nc=\", false, function () {\n  return [useBackend, useSuspenseQuery];\n});","map":{"version":3,"names":["useSuspenseQuery","useBackend","fetchInstance","getProductOptionsPath","productId","getProductOptions","params","baseURL","response","get","data","useGetProductOptions","_s","backendUrl","queryKey","queryFn"],"sources":["C:/Users/jihwan/projects/react-deploy/src/api/hooks/useGetProductOptions.ts"],"sourcesContent":["// src/api/hooks/useGetProductOptions.ts\r\nimport { useSuspenseQuery } from '@tanstack/react-query';\r\n\r\nimport { useBackend } from '@/provider/Auth/Backend'; // useBackend 훅 사용\r\nimport type { ProductOptionsData } from '@/types';\r\n\r\nimport { fetchInstance } from '../instance';\r\nimport type { ProductDetailRequestParams } from './useGetProductDetail';\r\n\r\ntype Props = ProductDetailRequestParams;\r\n\r\nexport type ProductOptionsResponseData = ProductOptionsData[];\r\n\r\nexport const getProductOptionsPath = (productId: string) => `/api/products/${productId}/options`;\r\n\r\nexport const getProductOptions = async (params: ProductDetailRequestParams, baseURL: string) => {\r\n  const response = await fetchInstance(baseURL).get<ProductOptionsResponseData>(\r\n    getProductOptionsPath(params.productId),\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const useGetProductOptions = ({ productId }: Props) => {\r\n  const { backendUrl } = useBackend(); // useBackend 훅 사용\r\n\r\n  return useSuspenseQuery({\r\n    queryKey: [getProductOptionsPath(productId)],\r\n    queryFn: () => getProductOptions({ productId }, backendUrl),\r\n  });\r\n};\r\n"],"mappings":";AAAA;AACA,SAASA,gBAAgB,QAAQ,uBAAuB;AAExD,SAASC,UAAU,QAAQ,yBAAyB,CAAC,CAAC;;AAGtD,SAASC,aAAa,QAAQ,aAAa;AAO3C,OAAO,MAAMC,qBAAqB,GAAIC,SAAiB,IAAM,iBAAgBA,SAAU,UAAS;AAEhG,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,MAAkC,EAAEC,OAAe,KAAK;EAC9F,MAAMC,QAAQ,GAAG,MAAMN,aAAa,CAACK,OAAO,CAAC,CAACE,GAAG,CAC/CN,qBAAqB,CAACG,MAAM,CAACF,SAAS,CACxC,CAAC;EACD,OAAOI,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAGA,CAAC;EAAEP;AAAiB,CAAC,KAAK;EAAAQ,EAAA;EAC5D,MAAM;IAAEC;EAAW,CAAC,GAAGZ,UAAU,CAAC,CAAC,CAAC,CAAC;;EAErC,OAAOD,gBAAgB,CAAC;IACtBc,QAAQ,EAAE,CAACX,qBAAqB,CAACC,SAAS,CAAC,CAAC;IAC5CW,OAAO,EAAEA,CAAA,KAAMV,iBAAiB,CAAC;MAAED;IAAU,CAAC,EAAES,UAAU;EAC5D,CAAC,CAAC;AACJ,CAAC;AAACD,EAAA,CAPWD,oBAAoB;EAAA,QACRV,UAAU,EAE1BD,gBAAgB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}