{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useInfiniteQuery } from '@tanstack/react-query';\nimport { BASE_URL } from '../instance';\nimport { fetchInstance } from './../instance/index';\nexport const getProductsPath = ({\n  categoryId,\n  pageToken,\n  maxResults\n} = {\n  categoryId: '',\n  pageToken: '',\n  maxResults: 20\n}) => {\n  const params = new URLSearchParams();\n  if (categoryId) params.append('categoryId', categoryId);\n  params.append('sort', 'name,asc');\n  if (pageToken) params.append('page', pageToken);\n  if (maxResults) params.append('size', maxResults.toString());\n  return `${BASE_URL}/api/products?${params.toString()}`;\n};\nexport const getProducts = async params => {\n  const response = await fetchInstance.get(getProductsPath(params));\n  const data = response.data;\n  return {\n    products: data.content,\n    nextPageToken: data.last === false ? (data.number + 1).toString() : undefined,\n    pageInfo: {\n      totalResults: data.totalElements,\n      resultsPerPage: data.size\n    }\n  };\n};\nexport const useGetProducts = ({\n  categoryId,\n  maxResults = 20,\n  initPageToken\n}) => {\n  _s();\n  return useInfiniteQuery({\n    queryKey: ['products', categoryId, maxResults, initPageToken],\n    queryFn: async ({\n      pageParam = initPageToken\n    }) => {\n      return getProducts({\n        categoryId,\n        pageToken: pageParam,\n        maxResults\n      });\n    },\n    initialPageParam: initPageToken,\n    getNextPageParam: lastPage => lastPage.nextPageToken\n  });\n};\n_s(useGetProducts, \"xMCOiuh9cV5e8gBi6hogZoGnISk=\", false, function () {\n  return [useInfiniteQuery];\n});","map":{"version":3,"names":["useInfiniteQuery","BASE_URL","fetchInstance","getProductsPath","categoryId","pageToken","maxResults","params","URLSearchParams","append","toString","getProducts","response","get","data","products","content","nextPageToken","last","number","undefined","pageInfo","totalResults","totalElements","resultsPerPage","size","useGetProducts","initPageToken","_s","queryKey","queryFn","pageParam","initialPageParam","getNextPageParam","lastPage"],"sources":["/Users/kyoungseo/Desktop/4학년/카테캠/step2/kakao-gift5/react-product-login/src/api/hooks/useGetProducts.ts"],"sourcesContent":["import {\n  type InfiniteData,\n  useInfiniteQuery,\n  type UseInfiniteQueryResult,\n} from '@tanstack/react-query';\n\nimport type { ProductData } from '@/types';\n\nimport { BASE_URL } from '../instance';\nimport { fetchInstance } from './../instance/index';\n\ntype RequestParams = {\n  categoryId: string;\n  pageToken?: string;\n  maxResults?: number;\n};\n\ntype ProductsResponseData = {\n  products: ProductData[];\n  nextPageToken?: string;\n  pageInfo: {\n    totalResults: number;\n    resultsPerPage: number;\n  };\n};\n\ntype ProductsResponseRawData = {\n  content: ProductData[];\n  number: number;\n  totalElements: number;\n  size: number;\n  last: boolean;\n};\n\nexport const getProductsPath = (\n  { categoryId, pageToken, maxResults }: RequestParams = {\n    categoryId: '',\n    pageToken: '',\n    maxResults: 20,\n  },\n) => {\n  const params = new URLSearchParams();\n\n  if (categoryId) params.append('categoryId', categoryId);\n  params.append('sort', 'name,asc');\n  if (pageToken) params.append('page', pageToken);\n  if (maxResults) params.append('size', maxResults.toString());\n\n  return `${BASE_URL}/api/products?${params.toString()}`;\n};\n\nexport const getProducts = async (params: RequestParams): Promise<ProductsResponseData> => {\n  const response = await fetchInstance.get<ProductsResponseRawData>(getProductsPath(params));\n  const data = response.data;\n\n  return {\n    products: data.content,\n    nextPageToken: data.last === false ? (data.number + 1).toString() : undefined,\n    pageInfo: {\n      totalResults: data.totalElements,\n      resultsPerPage: data.size,\n    },\n  };\n};\n\ntype Params = Pick<RequestParams, 'maxResults' | 'categoryId'> & { initPageToken?: string };\nexport const useGetProducts = ({\n  categoryId,\n  maxResults = 20,\n  initPageToken,\n}: Params): UseInfiniteQueryResult<InfiniteData<ProductsResponseData>> => {\n  return useInfiniteQuery({\n    queryKey: ['products', categoryId, maxResults, initPageToken],\n    queryFn: async ({ pageParam = initPageToken }) => {\n      return getProducts({ categoryId, pageToken: pageParam, maxResults });\n    },\n    initialPageParam: initPageToken,\n    getNextPageParam: (lastPage) => lastPage.nextPageToken,\n  });\n};\n"],"mappings":";AAAA,SAEEA,gBAAgB,QAEX,uBAAuB;AAI9B,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,aAAa,QAAQ,qBAAqB;AAyBnD,OAAO,MAAMC,eAAe,GAAGA,CAC7B;EAAEC,UAAU;EAAEC,SAAS;EAAEC;AAA0B,CAAC,GAAG;EACrDF,UAAU,EAAE,EAAE;EACdC,SAAS,EAAE,EAAE;EACbC,UAAU,EAAE;AACd,CAAC,KACE;EACH,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EAEpC,IAAIJ,UAAU,EAAEG,MAAM,CAACE,MAAM,CAAC,YAAY,EAAEL,UAAU,CAAC;EACvDG,MAAM,CAACE,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC;EACjC,IAAIJ,SAAS,EAAEE,MAAM,CAACE,MAAM,CAAC,MAAM,EAAEJ,SAAS,CAAC;EAC/C,IAAIC,UAAU,EAAEC,MAAM,CAACE,MAAM,CAAC,MAAM,EAAEH,UAAU,CAACI,QAAQ,CAAC,CAAC,CAAC;EAE5D,OAAO,GAAGT,QAAQ,iBAAiBM,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE;AACxD,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAOJ,MAAqB,IAAoC;EACzF,MAAMK,QAAQ,GAAG,MAAMV,aAAa,CAACW,GAAG,CAA0BV,eAAe,CAACI,MAAM,CAAC,CAAC;EAC1F,MAAMO,IAAI,GAAGF,QAAQ,CAACE,IAAI;EAE1B,OAAO;IACLC,QAAQ,EAAED,IAAI,CAACE,OAAO;IACtBC,aAAa,EAAEH,IAAI,CAACI,IAAI,KAAK,KAAK,GAAG,CAACJ,IAAI,CAACK,MAAM,GAAG,CAAC,EAAET,QAAQ,CAAC,CAAC,GAAGU,SAAS;IAC7EC,QAAQ,EAAE;MACRC,YAAY,EAAER,IAAI,CAACS,aAAa;MAChCC,cAAc,EAAEV,IAAI,CAACW;IACvB;EACF,CAAC;AACH,CAAC;AAGD,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAC7BtB,UAAU;EACVE,UAAU,GAAG,EAAE;EACfqB;AACM,CAAC,KAAiE;EAAAC,EAAA;EACxE,OAAO5B,gBAAgB,CAAC;IACtB6B,QAAQ,EAAE,CAAC,UAAU,EAAEzB,UAAU,EAAEE,UAAU,EAAEqB,aAAa,CAAC;IAC7DG,OAAO,EAAE,MAAAA,CAAO;MAAEC,SAAS,GAAGJ;IAAc,CAAC,KAAK;MAChD,OAAOhB,WAAW,CAAC;QAAEP,UAAU;QAAEC,SAAS,EAAE0B,SAAS;QAAEzB;MAAW,CAAC,CAAC;IACtE,CAAC;IACD0B,gBAAgB,EAAEL,aAAa;IAC/BM,gBAAgB,EAAGC,QAAQ,IAAKA,QAAQ,CAACjB;EAC3C,CAAC,CAAC;AACJ,CAAC;AAACW,EAAA,CAbWF,cAAc;EAAA,QAKlB1B,gBAAgB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}