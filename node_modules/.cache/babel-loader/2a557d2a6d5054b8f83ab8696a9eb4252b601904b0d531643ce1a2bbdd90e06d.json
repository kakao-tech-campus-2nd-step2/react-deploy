{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jihwan\\\\projects\\\\react-deploy\\\\src\\\\components\\\\features\\\\Order\\\\OrderForm\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport styled from '@emotion/styled';\nimport axios from 'axios';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { Spacing } from '@/components/common/layouts/Spacing';\nimport { SplitLayout } from '@/components/common/layouts/SplitLayout';\nimport { useAuth } from '@/provider/Auth';\nimport { useBackend } from '@/provider/Auth/Backend';\nimport { HEADER_HEIGHT } from '../../Layout/Header';\nimport { GoodsInfo } from './GoodsInfo';\nimport { OrderFormMessageCard } from './MessageCard';\nimport { OrderFormOrderInfo } from './OrderInfo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OrderForm = ({\n  orderHistory\n}) => {\n  _s();\n  const {\n    id,\n    count\n  } = orderHistory;\n  const methods = useForm({\n    defaultValues: {\n      productId: id,\n      productQuantity: count,\n      senderId: 0,\n      receiverId: 0,\n      hasCashReceipt: false\n    }\n  });\n  const {\n    handleSubmit\n  } = methods;\n  const {\n    backendUrl\n  } = useBackend();\n  const authInfo = useAuth();\n  const handleForm = async values => {\n    const {\n      errorMessage,\n      isValid\n    } = validateOrderForm(values);\n    if (!isValid) {\n      alert(errorMessage);\n      return;\n    }\n    try {\n      const response = await axios.post(`${backendUrl}/api/orders`, {\n        optionId: 1,\n        // 필요한 경우 실제 옵션 ID로 변경하세요\n        quantity: values.productQuantity,\n        message: values.messageCardTextMessage\n      }, {\n        headers: {\n          Authorization: 'Bearer eyJhbGciOiJIUzUxMiJ9.eyJtZW1iZXJJZCI6MSwiaWF0IjoxNzIyNTc4NjUyLCJleHAiOjE3MjI2NjUwNTJ9.WyxvHZbjN5SVTAOA4XQ29O44x_cHPZixMiHeoTeji2dwCbBsQ_3_ScGYPeimBOzk3hliwUH8WmPE7iZ5HAyzoA',\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.status === 200) {\n        alert('주문이 완료되었습니다.');\n      } else {\n        alert('주문에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('Failed to place order:', error);\n      alert('주문에 실패했습니다.');\n    }\n  };\n\n  // Submit 버튼을 누르면 form이 제출되는 것을 방지하기 위한 함수\n  const preventEnterKeySubmission = e => {\n    const target = e.target;\n    if (e.key === 'Enter' && !['TEXTAREA'].includes(target.tagName)) {\n      e.preventDefault();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(FormProvider, {\n    ...methods,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      onSubmit: handleSubmit(handleForm),\n      onKeyDown: preventEnterKeySubmission,\n      children: /*#__PURE__*/_jsxDEV(SplitLayout, {\n        sidebar: /*#__PURE__*/_jsxDEV(OrderFormOrderInfo, {\n          orderHistory: orderHistory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 31\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Wrapper, {\n          children: [/*#__PURE__*/_jsxDEV(OrderFormMessageCard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Spacing, {\n            height: 8,\n            backgroundColor: \"#ededed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GoodsInfo, {\n            orderHistory: orderHistory\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(OrderForm, \"Fm52X75bCd/J4mYQmT2vlI8S0k0=\", false, function () {\n  return [useForm, useBackend, useAuth];\n});\n_c = OrderForm;\nconst validateOrderForm = values => {\n  if (values.hasCashReceipt) {\n    if (!values.cashReceiptNumber) {\n      return {\n        errorMessage: '현금영수증 번호를 입력해주세요.',\n        isValid: false\n      };\n    }\n    if (!/^\\d+$/.test(values.cashReceiptNumber)) {\n      return {\n        errorMessage: '현금영수증 번호는 숫자로만 입력해주세요.',\n        isValid: false\n      };\n    }\n  }\n  if (values.messageCardTextMessage.length < 1) {\n    return {\n      errorMessage: '메시지를 입력해주세요.',\n      isValid: false\n    };\n  }\n  if (values.messageCardTextMessage.length > 100) {\n    return {\n      errorMessage: '메시지는 100자 이내로 입력해주세요.',\n      isValid: false\n    };\n  }\n  return {\n    isValid: true\n  };\n};\nconst Wrapper = styled.div`\n  border-left: 1px solid #e5e5e5;\n  height: calc(100vh - ${HEADER_HEIGHT});\n`;\n_c2 = Wrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"OrderForm\");\n$RefreshReg$(_c2, \"Wrapper\");","map":{"version":3,"names":["styled","axios","FormProvider","useForm","Spacing","SplitLayout","useAuth","useBackend","HEADER_HEIGHT","GoodsInfo","OrderFormMessageCard","OrderFormOrderInfo","jsxDEV","_jsxDEV","OrderForm","orderHistory","_s","id","count","methods","defaultValues","productId","productQuantity","senderId","receiverId","hasCashReceipt","handleSubmit","backendUrl","authInfo","handleForm","values","errorMessage","isValid","validateOrderForm","alert","response","post","optionId","quantity","message","messageCardTextMessage","headers","Authorization","status","error","console","preventEnterKeySubmission","e","target","key","includes","tagName","preventDefault","children","action","onSubmit","onKeyDown","sidebar","fileName","_jsxFileName","lineNumber","columnNumber","Wrapper","height","backgroundColor","_c","cashReceiptNumber","test","length","div","_c2","$RefreshReg$"],"sources":["C:/Users/jihwan/projects/react-deploy/src/components/features/Order/OrderForm/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport axios from 'axios';\r\nimport { FormProvider, useForm } from 'react-hook-form';\r\n\r\nimport { Spacing } from '@/components/common/layouts/Spacing';\r\nimport { SplitLayout } from '@/components/common/layouts/SplitLayout';\r\nimport { useAuth } from '@/provider/Auth';\r\nimport { useBackend } from '@/provider/Auth/Backend';\r\nimport type { OrderFormData, OrderHistory } from '@/types';\r\n\r\nimport { HEADER_HEIGHT } from '../../Layout/Header';\r\nimport { GoodsInfo } from './GoodsInfo';\r\nimport { OrderFormMessageCard } from './MessageCard';\r\nimport { OrderFormOrderInfo } from './OrderInfo';\r\n\r\ntype Props = {\r\n  orderHistory: OrderHistory;\r\n};\r\n\r\nexport const OrderForm = ({ orderHistory }: Props) => {\r\n  const { id, count } = orderHistory;\r\n  const methods = useForm<OrderFormData>({\r\n    defaultValues: {\r\n      productId: id,\r\n      productQuantity: count,\r\n      senderId: 0,\r\n      receiverId: 0,\r\n      hasCashReceipt: false,\r\n    },\r\n  });\r\n  const { handleSubmit } = methods;\r\n\r\n  const { backendUrl } = useBackend();\r\n  const authInfo = useAuth();\r\n\r\n  const handleForm = async (values: OrderFormData) => {\r\n    const { errorMessage, isValid } = validateOrderForm(values);\r\n\r\n    if (!isValid) {\r\n      alert(errorMessage);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        `${backendUrl}/api/orders`,\r\n        {\r\n          optionId: 1, // 필요한 경우 실제 옵션 ID로 변경하세요\r\n          quantity: values.productQuantity,\r\n          message: values.messageCardTextMessage,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization:\r\n              'Bearer eyJhbGciOiJIUzUxMiJ9.eyJtZW1iZXJJZCI6MSwiaWF0IjoxNzIyNTc4NjUyLCJleHAiOjE3MjI2NjUwNTJ9.WyxvHZbjN5SVTAOA4XQ29O44x_cHPZixMiHeoTeji2dwCbBsQ_3_ScGYPeimBOzk3hliwUH8WmPE7iZ5HAyzoA',\r\n            'Content-Type': 'application/json',\r\n          },\r\n        },\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        alert('주문이 완료되었습니다.');\r\n      } else {\r\n        alert('주문에 실패했습니다.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to place order:', error);\r\n      alert('주문에 실패했습니다.');\r\n    }\r\n  };\r\n\r\n  // Submit 버튼을 누르면 form이 제출되는 것을 방지하기 위한 함수\r\n  const preventEnterKeySubmission = (e: React.KeyboardEvent<HTMLFormElement>) => {\r\n    const target = e.target as HTMLFormElement;\r\n    if (e.key === 'Enter' && !['TEXTAREA'].includes(target.tagName)) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormProvider {...methods}>\r\n      <form action=\"\" onSubmit={handleSubmit(handleForm)} onKeyDown={preventEnterKeySubmission}>\r\n        <SplitLayout sidebar={<OrderFormOrderInfo orderHistory={orderHistory} />}>\r\n          <Wrapper>\r\n            <OrderFormMessageCard />\r\n            <Spacing height={8} backgroundColor=\"#ededed\" />\r\n            <GoodsInfo orderHistory={orderHistory} />\r\n          </Wrapper>\r\n        </SplitLayout>\r\n      </form>\r\n    </FormProvider>\r\n  );\r\n};\r\n\r\nconst validateOrderForm = (values: OrderFormData): { errorMessage?: string; isValid: boolean } => {\r\n  if (values.hasCashReceipt) {\r\n    if (!values.cashReceiptNumber) {\r\n      return {\r\n        errorMessage: '현금영수증 번호를 입력해주세요.',\r\n        isValid: false,\r\n      };\r\n    }\r\n\r\n    if (!/^\\d+$/.test(values.cashReceiptNumber)) {\r\n      return {\r\n        errorMessage: '현금영수증 번호는 숫자로만 입력해주세요.',\r\n        isValid: false,\r\n      };\r\n    }\r\n  }\r\n\r\n  if (values.messageCardTextMessage.length < 1) {\r\n    return {\r\n      errorMessage: '메시지를 입력해주세요.',\r\n      isValid: false,\r\n    };\r\n  }\r\n\r\n  if (values.messageCardTextMessage.length > 100) {\r\n    return {\r\n      errorMessage: '메시지는 100자 이내로 입력해주세요.',\r\n      isValid: false,\r\n    };\r\n  }\r\n\r\n  return {\r\n    isValid: true,\r\n  };\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  border-left: 1px solid #e5e5e5;\r\n  height: calc(100vh - ${HEADER_HEIGHT});\r\n`;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}