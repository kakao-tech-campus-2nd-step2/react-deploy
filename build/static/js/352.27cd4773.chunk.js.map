{"version":3,"file":"static/js/352.27cd4773.chunk.js","mappings":"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","sources":["api/hooks/categories.mock.ts","api/hooks/products.mock.ts","api/hooks/interest.mock.ts","api/hooks/login.mock.ts","api/hooks/order.mock.ts","api/hooks/signup.mock.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from 'msw';\n\nimport { getCategoriesPath } from './useGetCategorys';\n\nexport const categoriesMockHandler = [\n  rest.get(getCategoriesPath(), (_, res, ctx) => {\n    return res(ctx.json(CATEGORIES_RESPONSE_DATA));\n  }),\n];\n\nconst CATEGORIES_RESPONSE_DATA = [\n  {\n    id: 1,\n    name: '생일',\n    description: '감동을 높여줄 생일 선물 리스트',\n    color: '#5949a3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png',\n  },\n  {\n    id: 2,\n    name: '교환권',\n    description: '놓치면 후회할 교환권 특가',\n    color: '#9290C3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20240131153049_5a22b137a8d346e9beb020a7a7f4254a.jpg',\n  },\n];\n","import { rest } from 'msw';\n\nimport { getProductDetailPath } from './useGetProductDetail';\nimport { getProductOptionsPath } from './useGetProductOptions';\nimport { getProductsPath } from './useGetProducts';\n\nexport const productsMockHandler = [\n  rest.get(getProductsPath({ categoryId: '1' }), (req, res, ctx) => {\n    const categoryId = req.url.searchParams.get('categoryId');\n    if (categoryId === '1') {\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\n    }\n  }),\n  rest.get(getProductsPath({ categoryId: '2' }), (req, res, ctx) => {\n    const categoryId = req.url.searchParams.get('categoryId');\n    if (categoryId === '2') {\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\n    }\n  }),\n  rest.get(getProductDetailPath(':productId'), (req, res, ctx) => {\n    const { productId } = req.params;\n    return res(ctx.json(PRODUCTS_MOCK_DATA.content.find((p) => p.id === Number(productId))));\n  }),\n  rest.get(getProductOptionsPath(':productId'), (_, res, ctx) => {\n    return res(\n      ctx.json([\n        {\n          id: 1,\n          name: 'Option A',\n          quantity: 10,\n          productId: 1,\n        },\n        {\n          id: 2,\n          name: 'Option B',\n          quantity: 20,\n          productId: 1,\n        },\n      ]),\n    );\n  }),\n];\n\nexport const PRODUCTS_MOCK_DATA = {\n  content: [\n    {\n      id: 3245119,\n      name: '[단독각인] 피렌체 1221 에디션 오드코롱 50ml (13종 택1)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215083306_8e1db057580145829542463a84971ae3.png',\n      price: 145000,\n    },\n    {\n      id: 2263833,\n      name: '외식 통합권 10만원권',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20200513102805_4867c1e4a7ae43b5825e9ae14e2830e3.png',\n      price: 100000,\n    },\n    {\n      id: 6502823,\n      name: '[선물포장/미니퍼퓸증정] 디켄터 리드 디퓨저 300ml + 메세지카드',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215112140_11f857e972bc4de6ac1d2f1af47ce182.jpg',\n      price: 108000,\n    },\n    {\n      id: 1181831,\n      name: '[선물포장] 소바쥬 오 드 뚜왈렛 60ML',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240214150740_ad25267defa64912a7c030a7b57dc090.jpg',\n      price: 122000,\n    },\n    {\n      id: 1379982,\n      name: '[정관장] 홍삼정 에브리타임 리미티드 (10ml x 30포)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240118135914_a6e1a7442ea04aa49add5e02ed62b4c3.jpg',\n      price: 133000,\n    },\n  ],\n  number: 0,\n  totalElements: 5,\n  size: 10,\n  last: true,\n};\n","import { rest } from \"msw\";\n\nimport type { WishItem } from \"@/pages/MyAccount\";\nimport { PRODUCTS_MOCK_DATA } from \"./products.mock\";\n\nconst wishesDatabase: WishItem[] = []; // WishItem 형식으로 변경\nlet nextId = 1;\nexport const interestHandlers = [\n  // 관심 목록에 추가\n  rest.post(\"/api/members/wishes/products/:productId\", (req, res, ctx) => {\n    const { productId } = req.params;\n    const product = PRODUCTS_MOCK_DATA.content.find(\n      (item) => item.id === Number(productId)\n    );\n\n    // 유효성 검사: productId에 해당하는 상품이 존재하는지 확인\n    if (!product) {\n      console.log(productId);\n      return res(ctx.status(404), ctx.json({ message: \"Product not found\" }));\n    }\n\n    const newWish = {\n      id: nextId++, // 고유 ID 할당\n      product,\n    };\n\n    wishesDatabase.push(newWish);\n    console.log(newWish);\n\n    return res(ctx.status(201), ctx.json(newWish));\n  }),\n\n  // 관심 목록 리스트 불러오기\n  rest.get(\"/api/members/wishes\", (req, res, ctx) => {\n    const page = parseInt(req.url.searchParams.get(\"page\") || \"0\");\n    const size = parseInt(req.url.searchParams.get(\"size\") || \"10\");\n    const totalElements = wishesDatabase.length;\n    const totalPages = Math.ceil(totalElements / size);\n\n    const start = page * size;\n    const end = start + size;\n    const content = wishesDatabase.slice(start, end);\n\n    return res(\n      ctx.status(200),\n      ctx.json({\n        content,\n        pageable: {\n          sort: {\n            sorted: true,\n            unsorted: false,\n            empty: false,\n          },\n          pageNumber: page,\n          pageSize: size,\n          offset: start,\n          unpaged: false,\n          paged: true,\n        },\n        totalPages,\n        totalElements,\n        last: page === totalPages - 1,\n        number: page,\n        size,\n        numberOfElements: content.length,\n        first: page === 0,\n        empty: content.length === 0,\n      })\n    );\n  }),\n\n  // 위시 삭제 핸들러 추가\n  rest.delete(\"/api/members/wishes/:wishId\", (req, res, ctx) => {\n    const { wishId } = req.params;\n    const wishIndex = wishesDatabase.findIndex(\n      (wish) => wish.id === Number(wishId)\n    );\n\n    if (wishIndex === -1) {\n      return res(ctx.status(404), ctx.json({ message: \"Wish not found\" }));\n    }\n\n    wishesDatabase.splice(wishIndex, 1); // 위시 삭제\n    return res(ctx.status(204)); // 성공 응답\n  }),\n];\n","import { rest } from 'msw';\n\nimport { BASE_URL } from '../instance';\n\ntype LoginRequestBody = {\n  email: string;\n  password: string;\n};\nexport const loginHandler = [\n  rest.post(`${BASE_URL}/api/members/login`, (req, res, ctx) => {\n    const { email, password } = req.body as LoginRequestBody;\n\n    // Mocking login validation\n    if (email === 'test@example.com' && password === 'password123') {\n      return res(\n        ctx.status(200),\n        ctx.json({\n          email,\n          accessToken: 'mocked-jwt-token',\n        }),\n      );\n    } else {\n      return res(ctx.status(401), ctx.json({ message: 'Invalid email or password' }));\n    }\n  }),\n];\n","import { rest } from 'msw';\n\nimport { PRODUCTS_MOCK_DATA } from './products.mock';\n\ninterface OrderFormData {\n  productId: number;\n  optionId: number;\n  quantity: number;\n  hasCashReceipt: boolean;\n  cashReceiptType?: string;\n  cashReceiptNumber?: string;\n  message?: string;\n}\n\ninterface Order extends OrderFormData {\n  id: number;\n  productName: string;\n  optionName: string;\n  price: number;\n  date: string;\n  imageUrl: string;\n}\n\nlet nextOrderId = 1;\nconst ordersDatabase: Order[] = [];\n\nexport const orderHandlers = [\n  // 주문 생성 핸들러\n  rest.post('/api/orders', (req, res, ctx) => {\n    const newOrder = req.body as OrderFormData;\n\n    // 유효성 검사\n    if (!newOrder.productId || !newOrder.optionId || !newOrder.quantity) {\n      return res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\n    }\n\n    // productId로 상품 정보 찾기\n    const product = PRODUCTS_MOCK_DATA.content.find((p) => p.id === newOrder.productId);\n\n    if (!product) {\n      return res(ctx.status(404), ctx.json({ message: 'Product not found' }));\n    }\n\n    // 주문 생성 로직\n    const createdOrder: Order = {\n      id: nextOrderId++, // 고유 ID 할당\n      productName: product.name,\n      optionName: '기본 옵션', // 예시로 기본 옵션으로 설정\n      price: product.price * newOrder.quantity, // 수량에 따른 가격 계산\n      date: new Date().toISOString(),\n      imageUrl: product.imageUrl,\n      ...newOrder,\n    };\n\n    // 데이터베이스에 저장\n    ordersDatabase.push(createdOrder);\n    console.log('Created Order:', createdOrder);\n\n    return res(ctx.status(200), ctx.json(createdOrder));\n  }),\n\n  // 주문 목록 불러오기 핸들러\n  rest.get('/api/orders', (req, res, ctx) => {\n    const page = parseInt(req.url.searchParams.get('page') || '0');\n    const size = parseInt(req.url.searchParams.get('size') || '10');\n    const totalElements = ordersDatabase.length;\n    const totalPages = Math.ceil(totalElements / size);\n\n    const start = page * size;\n    const end = start + size;\n    const orders = ordersDatabase.slice(start, end).map((order) => ({\n      orderId: order.id,\n      productId: order.productId,\n      productName: order.productName,\n      optionName: order.optionName,\n      quantity: order.quantity,\n      date: order.date,\n      price: order.price,\n      imageUrl: order.imageUrl,\n    }));\n\n    return res(\n      ctx.status(200),\n      ctx.json({\n        hasNext: page < totalPages - 1,\n        orders,\n      }),\n    );\n  }),\n];\n","import { rest } from 'msw';\n\nimport { BASE_URL } from '../instance';\n\ntype SignupRequestBody = {\n  email: string;\n  password: string;\n};\n\nconst usersDatabase = [\n  { email: 'test@example.com', password: 'password123' }, // 임시 데이터\n];\n\nexport const signupHandler = [\n  // 회원가입 엔드포인트 수정\n  rest.post(`${BASE_URL}/api/members/register`, (req, res, ctx) => {\n    const { email, password } = req.body as SignupRequestBody;\n\n    // 중복 이메일 체크\n    const existingUser = usersDatabase.find((user) => user.email === email);\n    if (existingUser) {\n      return res(ctx.status(400), ctx.json({ message: '이미 사용 중인 이메일입니다.' }));\n    }\n\n    // 임시 데이터와 동일한 경우\n    if (email === 'test@example.com' && password === 'password123') {\n      return res(\n        ctx.status(400),\n        ctx.json({ message: '해당 이메일과 비밀번호는 사용할 수 없습니다.' }),\n      );\n    }\n\n    // 사용자 추가\n    usersDatabase.push({ email, password });\n    return res(ctx.status(201), ctx.json({ email, accessToken: 'mocked-jwt-token' })); // 이메일과 토큰 반환\n  }),\n];\n","import { setupWorker } from 'msw';\n\nimport { categoriesMockHandler } from '@/api/hooks/categories.mock';\nimport { interestHandlers } from '@/api/hooks/interest.mock';\nimport { loginHandler } from '@/api/hooks/login.mock';\nimport { orderHandlers } from '@/api/hooks/order.mock';\nimport { productsMockHandler } from '@/api/hooks/products.mock';\nimport { signupHandler } from '@/api/hooks/signup.mock';\n\nexport const worker = setupWorker(\n  ...categoriesMockHandler,\n  ...productsMockHandler,\n  ...loginHandler,\n  ...signupHandler,\n  ...interestHandlers,\n  ...orderHandlers,\n);\n"],"names":["categoriesMockHandler","rest","get","getCategoriesPath","_","res","ctx","json","CATEGORIES_RESPONSE_DATA","id","name","description","color","imageUrl","productsMockHandler","getProductsPath","categoryId","req","url","searchParams","PRODUCTS_MOCK_DATA","getProductDetailPath","productId","params","content","find","p","Number","getProductOptionsPath","quantity","price","number","totalElements","size","last","wishesDatabase","nextId","interestHandlers","post","product","item","console","log","status","message","newWish","push","page","parseInt","length","totalPages","Math","ceil","start","end","slice","pageable","sort","sorted","unsorted","empty","pageNumber","pageSize","offset","unpaged","paged","numberOfElements","first","delete","wishId","wishIndex","findIndex","wish","splice","loginHandler","concat","BASE_URL","email","password","body","accessToken","nextOrderId","ordersDatabase","orderHandlers","newOrder","optionId","createdOrder","productName","optionName","date","Date","toISOString","orders","map","order","orderId","hasNext","usersDatabase","signupHandler","user","worker","setupWorker"],"sourceRoot":""}