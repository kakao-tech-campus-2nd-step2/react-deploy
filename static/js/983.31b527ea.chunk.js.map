{"version":3,"file":"static/js/983.31b527ea.chunk.js","mappings":"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","sources":["api/hooks/categories.mock.ts","api/hooks/useGetProducts.ts","api/hooks/products.mock.ts","api/hooks/login.mock.ts","api/hooks/register.mock.ts","api/hooks/wish.mock.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from 'msw';\r\n\r\nimport { getCategoriesPath } from './useGetCategorys';\r\n\r\nexport const categoriesMockHandler = [\r\n  rest.get(getCategoriesPath(), (_, res, ctx) => {\r\n    return res(ctx.json(CATEGORIES_RESPONSE_DATA));\r\n  }),\r\n];\r\n\r\nconst CATEGORIES_RESPONSE_DATA = [\r\n  {\r\n    id: 2920,\r\n    name: '생일',\r\n    description: '감동을 높여줄 생일 선물 리스트',\r\n    color: '#5949a3',\r\n    imageUrl:\r\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png',\r\n  },\r\n  {\r\n    id: 2930,\r\n    name: '교환권',\r\n    description: '놓치면 후회할 교환권 특가',\r\n    color: '#9290C3',\r\n    imageUrl:\r\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20240131153049_5a22b137a8d346e9beb020a7a7f4254a.jpg',\r\n  },\r\n];\r\n","import {\r\n  type InfiniteData,\r\n  useInfiniteQuery,\r\n  type UseInfiniteQueryResult,\r\n} from '@tanstack/react-query';\r\n\r\nimport type { ProductData } from '@/types';\r\n\r\nimport { BASE_URL } from '../instance';\r\nimport { fetchInstance } from './../instance/index';\r\n\r\ntype RequestParams = {\r\n  categoryId: string;\r\n  pageToken?: string;\r\n  maxResults?: number;\r\n};\r\n\r\ntype ProductsResponseData = {\r\n  products: ProductData[];\r\n  nextPageToken?: string;\r\n  pageInfo: {\r\n    totalResults: number;\r\n    resultsPerPage: number;\r\n  };\r\n};\r\n\r\ntype ProductsResponseRawData = {\r\n  content: ProductData[];\r\n  number: number;\r\n  totalElements: number;\r\n  size: number;\r\n  last: boolean;\r\n};\r\n\r\nexport const getProductsPath = ({ categoryId, pageToken, maxResults }: RequestParams) => {\r\n  const params = new URLSearchParams();\r\n\r\n  params.append('categoryId', categoryId);\r\n  params.append('sort', 'name,asc');\r\n  if (pageToken) params.append('page', pageToken);\r\n  if (maxResults) params.append('size', maxResults.toString());\r\n\r\n  return `${BASE_URL}/api/products?${params.toString()}`;\r\n};\r\n\r\nexport const getProducts = async (params: RequestParams): Promise<ProductsResponseData> => {\r\n  const response = await fetchInstance.get<ProductsResponseRawData>(getProductsPath(params));\r\n  const data = response.data;\r\n\r\n  return {\r\n    products: data.content,\r\n    nextPageToken: data.last === false ? (data.number + 1).toString() : undefined,\r\n    pageInfo: {\r\n      totalResults: data.totalElements,\r\n      resultsPerPage: data.size,\r\n    },\r\n  };\r\n};\r\n\r\ntype Params = Pick<RequestParams, 'maxResults' | 'categoryId'> & { initPageToken?: string };\r\nexport const useGetProducts = ({\r\n  categoryId,\r\n  maxResults = 20,\r\n  initPageToken,\r\n}: Params): UseInfiniteQueryResult<InfiniteData<ProductsResponseData>> => {\r\n  return useInfiniteQuery({\r\n    queryKey: ['products', categoryId, maxResults, initPageToken],\r\n    queryFn: async ({ pageParam = initPageToken }) => {\r\n      return getProducts({ categoryId, pageToken: pageParam, maxResults });\r\n    },\r\n    initialPageParam: initPageToken,\r\n    getNextPageParam: (lastPage) => lastPage.nextPageToken,\r\n  });\r\n};\r\n","import { rest } from 'msw';\r\n\r\nimport { getProductDetailPath } from './useGetProductDetail';\r\nimport { getProductOptionsPath } from './useGetProductOptions';\r\nimport { getProductsPath } from './useGetProducts';\r\n\r\nexport const productsMockHandler = [\r\n  rest.get(\r\n    getProductsPath({\r\n      categoryId: '2920',\r\n    }),\r\n    (_, res, ctx) => {\r\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\r\n    },\r\n  ),\r\n  rest.get(\r\n    getProductsPath({\r\n      categoryId: '2930',\r\n    }),\r\n    (_, res, ctx) => {\r\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\r\n    },\r\n  ),\r\n  \r\n  rest.get(getProductDetailPath(':productId'), (req, res, ctx) => {\r\n    const productIdParam = req.params.productId;\r\n    const productId = Array.isArray(productIdParam) ? productIdParam[0] : productIdParam;\r\n    const product = PRODUCTS_MOCK_DATA.content.find((item) => item.id === parseInt(productId, 10));\r\n    if (product) {\r\n      return res(ctx.json(product));\r\n    } else {\r\n      return res(ctx.status(404), ctx.json({ message: 'Product not found' }));\r\n    }\r\n  }),\r\n  rest.get(getProductOptionsPath(':productId'), (_, res, ctx) => {\r\n    return res(\r\n      ctx.json([\r\n        {\r\n          id: 1,\r\n          name: 'Option A',\r\n          quantity: 10,\r\n          productId: 1,\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Option B',\r\n          quantity: 20,\r\n          productId: 1,\r\n        },\r\n      ]),\r\n    );\r\n  }),\r\n];\r\n\r\nexport const PRODUCTS_MOCK_DATA = {\r\n  content: [\r\n    {\r\n      id: 3245119,\r\n      name: '[단독각인] 피렌체 1221 에디션 오드코롱 50ml (13종 택1)',\r\n      imageUrl:\r\n        'https://st.kakaocdn.net/product/gift/product/20240215083306_8e1db057580145829542463a84971ae3.png',\r\n      price: 145000,\r\n    },\r\n    {\r\n      id: 2263833,\r\n      name: '외식 통합권 10만원권',\r\n      imageUrl:\r\n        'https://st.kakaocdn.net/product/gift/product/20200513102805_4867c1e4a7ae43b5825e9ae14e2830e3.png',\r\n      price: 100000,\r\n    },\r\n    {\r\n      id: 6502823,\r\n      name: '[선물포장/미니퍼퓸증정] 디켄터 리드 디퓨저 300ml + 메세지카드',\r\n      imageUrl:\r\n        'https://st.kakaocdn.net/product/gift/product/20240215112140_11f857e972bc4de6ac1d2f1af47ce182.jpg',\r\n      price: 108000,\r\n    },\r\n    {\r\n      id: 1181831,\r\n      name: '[선물포장] 소바쥬 오 드 뚜왈렛 60ML',\r\n      imageUrl:\r\n        'https://st.kakaocdn.net/product/gift/product/20240214150740_ad25267defa64912a7c030a7b57dc090.jpg',\r\n      price: 122000,\r\n    },\r\n    {\r\n      id: 1379982,\r\n      name: '[정관장] 홍삼정 에브리타임 리미티드 (10ml x 30포)',\r\n      imageUrl:\r\n        'https://st.kakaocdn.net/product/gift/product/20240118135914_a6e1a7442ea04aa49add5e02ed62b4c3.jpg',\r\n      price: 133000,\r\n    },\r\n  ],\r\n  number: 0,\r\n  totalElements: 5,\r\n  size: 10,\r\n  last: true,\r\n};\r\n","import { rest } from 'msw';\r\nimport { BASE_URL } from '../instance';\r\nimport { authSessionStorage } from '@/utils/storage';\r\n\r\nexport const loginMockHandler = [\r\n  rest.get(`${BASE_URL}/kakao/login`, (req, res, ctx) => {\r\n    // 카카오 로그인 성공 후, 서버에서 토큰 발급\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json({\r\n        token: 'mock-kakao-token',\r\n      })\r\n    );\r\n  }),\r\n];\r\n","import { rest } from 'msw';\r\nimport { BASE_URL } from '../instance';\r\nimport { userSessionStorage } from '@/utils/storage';\r\n\r\nexport const registerMockHandler = [\r\n  rest.post(`${BASE_URL}/api/members/register`, async (req, res, ctx) => {\r\n    const { email, password } = await req.json<{ email: string; password: string }>();\r\n\r\n    if (email && password) {\r\n      // 사용자 정보를 sessionStorage에 저장\r\n      userSessionStorage.set({ email, password });\r\n      return res(\r\n        ctx.status(201),\r\n        ctx.json({\r\n          email,\r\n          token: 'mock-token',\r\n        })\r\n      );\r\n    }\r\n\r\n    return res(\r\n      ctx.status(400),\r\n      ctx.json({\r\n        message: 'Invalid input',\r\n      })\r\n    );\r\n  }),\r\n];\r\n","import { rest } from 'msw';\r\nimport { BASE_URL } from '../instance/index';\r\nimport { Wish } from '@/types';\r\nimport { PRODUCTS_MOCK_DATA } from './products.mock';\r\n\r\nlet wishlist: Wish[] = [];\r\n\r\nexport const wishMockHandler = [\r\n  rest.post(`${BASE_URL}/api/wishes`, async (req, res, ctx) => {\r\n    const { productId } = await req.json<{ productId: number }>();\r\n\r\n    if (productId) {\r\n      const newWish = { id: Date.now(), productId };\r\n      wishlist.push(newWish);\r\n      return res(ctx.status(201), ctx.json(newWish));\r\n    }\r\n\r\n    return res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\r\n  }),\r\n\r\n  rest.get(`${BASE_URL}/api/wishes`, (req, res, ctx) => {\r\n    const wishListContent = wishlist.map(wish => {\r\n      const product = PRODUCTS_MOCK_DATA.content.find(p => p.id === wish.productId);\r\n      if (product) {\r\n        return {\r\n          id: wish.id,\r\n          product: {\r\n            id: product.id,\r\n            name: product.name,\r\n            price: product.price,\r\n            imageUrl: product.imageUrl\r\n          }\r\n        };\r\n      }\r\n      return null;\r\n    }).filter(item => item !== null);\r\n\r\n    return res(ctx.status(200), ctx.json({\r\n      content: wishListContent,\r\n      pageable: {\r\n        sort: {\r\n          sorted: true,\r\n          unsorted: false,\r\n          empty: false\r\n        },\r\n        pageNumber: 0,\r\n        pageSize: 10,\r\n        offset: 0,\r\n        unpaged: false,\r\n        paged: true\r\n      },\r\n      totalPages: 1,\r\n      totalElements: wishListContent.length,\r\n      last: true,\r\n      number: 0,\r\n      size: 10,\r\n      numberOfElements: wishListContent.length,\r\n      first: true,\r\n      empty: false\r\n    }));\r\n  }),\r\n\r\n  rest.delete(`${BASE_URL}/api/wishes/:wishId`, (req, res, ctx) => {\r\n    const wishId = parseInt(req.params.wishId as string, 10);\r\n    wishlist = wishlist.filter(wish => wish.id !== wishId);\r\n    return res(ctx.status(204));\r\n  }),\r\n];\r\n","import { setupWorker } from 'msw';\r\n\r\nimport { categoriesMockHandler } from '@/api/hooks/categories.mock';\r\nimport { productsMockHandler } from '@/api/hooks/products.mock';\r\nimport { loginMockHandler } from '@/api/hooks/login.mock';\r\nimport { registerMockHandler } from '@/api/hooks/register.mock';\r\nimport { wishMockHandler } from '../api/hooks/wish.mock';\r\n\r\nexport const worker = setupWorker(\r\n  ...categoriesMockHandler,\r\n  ...productsMockHandler,\r\n  ...loginMockHandler,\r\n  ...registerMockHandler,\r\n  ...wishMockHandler,\r\n);\r\n"],"names":["categoriesMockHandler","rest","get","getCategoriesPath","_","res","ctx","json","CATEGORIES_RESPONSE_DATA","id","name","description","color","imageUrl","getProductsPath","_ref","categoryId","pageToken","maxResults","params","URLSearchParams","append","toString","concat","BASE_URL","productsMockHandler","PRODUCTS_MOCK_DATA","getProductDetailPath","req","productIdParam","productId","Array","isArray","product","content","find","item","parseInt","status","message","getProductOptionsPath","quantity","price","number","totalElements","size","last","loginMockHandler","token","registerMockHandler","post","async","email","password","userSessionStorage","set","wishlist","wishMockHandler","newWish","Date","now","push","wishListContent","map","wish","p","filter","pageable","sort","sorted","unsorted","empty","pageNumber","pageSize","offset","unpaged","paged","totalPages","length","numberOfElements","first","delete","wishId","worker","setupWorker"],"sourceRoot":""}